<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:popups="edu.newschool.piim.healthboard.view.components.popups.*"
	xmlns:general="edu.newschool.piim.healthboard.view.components.general.*"
	skinClass="edu.newschool.piim.healthboard.view.skins.general.myHeaderlessTitleWindow"
	width="507" height="473"
	controlBarVisible="true" 
	creationComplete="init()" xmlns:components="edu.newschool.piim.healthboard.components.*" xmlns:components1="org.flashcommander.components.*">
	
	<fx:Script>
		<![CDATA[
			import edu.newschool.piim.healthboard.enum.DietClassQuantifier;
			import edu.newschool.piim.healthboard.events.MealEvent;
			import edu.newschool.piim.healthboard.model.PatientModel;
			import edu.newschool.piim.healthboard.model.ProviderModel;
			import edu.newschool.piim.healthboard.model.ProviderNutritionModel;
			import edu.newschool.piim.healthboard.model.module.nutrition.Food;
			import edu.newschool.piim.healthboard.model.module.nutrition.FoodPlan;
			import edu.newschool.piim.healthboard.model.module.nutrition.FoodServing;
			import edu.newschool.piim.healthboard.model.module.nutrition.MealCategory;
			import edu.newschool.piim.healthboard.util.DateFormatters;
			import edu.newschool.piim.healthboard.view.components.popups.DeleteConfirmation;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.List;
			import spark.events.IndexChangeEvent;
			
			private const NONE_LABEL:String = "NONE";
			
			[Bindable] public var model:ProviderNutritionModel = ProviderNutritionModel(AppProperties.getInstance().controller.nutritionController.model);
			
			[Bindable] public var patient:PatientModel;
			
			//	currently selected meal plan, if any
			[Bindable] private var plan:FoodPlan;
			
			[Bindable] public var quantifiers:ArrayCollection = new ArrayCollection
				(
					[
						DietClassQuantifier.EXACTLY,DietClassQuantifier.LESS_THAN,DietClassQuantifier.MORE_THAN,DietClassQuantifier.MINIMUM,DietClassQuantifier.MAXIMUM
					]
				);
			
			[Bindable] private var tabOptions:ArrayCollection = new ArrayCollection
				( 
					[
						'Description', 'Food Servings', 'Food to Increase', 'Food to Limit', 'Suggested Meals'
					]
				);
			
			[Bindable] private var foodLibrary:ArrayCollection = new ArrayCollection
				(
					[
						new Food('Asparagus'),new Food('Avocado'),new Food('Beef'),new Food('Beets'),new Food('Berries'),new Food('Dairy'),new Food('Donuts'),
						new Food('Fast Food'),new Food('Fried Chicken'),new Food('Grapes'),new Food('Green Peas'),new Food('Ice Cream'),new Food('Kiwi fruits'),
						new Food('Kidney beans')
					]
				);
			
			[Bindable] private var foodsToIncreaseAll:ArrayCollection;
			[Bindable] private var foodsToLimitAll:ArrayCollection;
			
			[Bindable] private var isNew:Boolean;
			[Bindable] private var isAssigned:Boolean;
			
			private var addNewOption:Object = { name: "+Add new" };
			private var noneOption:Object = { name: NONE_LABEL };
			
			private var alphabeticSort:Sort;
			
			[Bindable] private var plans:ArrayCollection;
			
			private function getDateLabel(item:Date):String 
			{
				return DateFormatters.dateOnlyBackslashDelimited.format(item);
			}
			
			private function getPlanLabel(item:Object):String
			{
				var title:String = item.name;
				
				if( (item is FoodPlan && item == patient.foodPlan)
					|| (item == noneOption && patient.foodPlan==null)
					|| (item == null && patient.foodPlan==null) )
					title += ' (assigned)';
				
				return title;
			}
			
			private function initNewFoodPlan():void
			{
				plan = new FoodPlan();
				plan.name = "New";
				plan.patient = patient;
				plan.provider = ProviderModel(AppProperties.getInstance().controller.model.user);
				
				isNew = true;
				isAssigned = false;
				
				selectedPlan.selectedIndex = -1;
				selectedPlan.prompt = "New";
			}
			
			private function onSelectMealPlan(event:IndexChangeEvent):void
			{
				var data:* = DropDownList(event.currentTarget).selectedItem;
				
				if( data.name == noneOption.name )
				{
					plan = null;
					isAssigned = patient.foodPlan == null;
					
					return;
				}
				
				selectPlan( data as FoodPlan );
			}
			
			private function selectPlan( plan:FoodPlan ):void
			{
				isAssigned = (plan == patient.foodPlan);
				isNew = false;
				
				selectedPlan.prompt = getPlanLabel(plan);
				
				plan = plan.clone();
				plan.dirty = false;
				
				if( !plan.patient ) plan.patient = patient;
				if( !plan.provider ) plan.provider = ProviderModel(AppProperties.getInstance().controller.model.user);
				
				this.plan = plan;
				
				tabs.selectedIndex = 0;
				
				updateFoods();
			}
			
			/*	food servings	*/
			private function onAddFoodServingsCategoryClick(event:MouseEvent):void
			{
				var popup:AddServingCategoryPopup = AddServingCategoryPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, AddServingCategoryPopup) as TitleWindow );
				popup.addEventListener( CloseEvent.CLOSE, onAddFoodServingsCategoryClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onAddFoodServingsCategoryClose(event:CloseEvent):void
			{
				var popup:AddServingCategoryPopup = event.currentTarget as AddServingCategoryPopup;
				
				if( event.detail == Alert.YES )
				{
					plan.servingCategories.addItem( popup.serving );
				}
				
				PopUpManager.removePopUp( popup );
				
				popup.removeEventListener( CloseEvent.CLOSE, onAddFoodServingsCategoryClose );
			}
			
			private function onFoodListClick(event:MouseEvent):void
			{
				if( List(event.currentTarget).selectedItem == addNewOption )
				{
					addNewFood();
				}
			}
			
			private function addNewFood():void
			{
				var popup:AddFoodPopup = AddFoodPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, AddFoodPopup) as TitleWindow );
				popup.addEventListener( CloseEvent.CLOSE, onAddFoodClose );
				PopUpManager.centerPopUp( popup );
			}
			
			public function onDeleteFoodServingsCategoryClick(event:MouseEvent,item:FoodServing):void
			{
				var popup:DeleteConfirmation = DeleteConfirmation( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, DeleteConfirmation) as TitleWindow );
				popup.confirmationText = "Are you sure you want to delete this tracker?";
				popup.data = item;
				popup.addEventListener( CloseEvent.CLOSE, onDeleteFoodServingsCategoryClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onDeleteFoodServingsCategoryClose(event:CloseEvent):void
			{
				var popup:DeleteConfirmation = event.currentTarget as DeleteConfirmation;
				
				if( event.detail == Alert.YES
					&& popup.data is FoodServing )
				{
					if( !plan ) return;
					
					plan.servingCategories.removeItemAt( plan.servingCategories.getItemIndex( popup.data ) );
				}
				
				PopUpManager.removePopUp( popup );
				
				popup.removeEventListener( CloseEvent.CLOSE, onDeleteFoodServingsCategoryClose );
			}
			
			private function onAddFoodClose(event:CloseEvent):void
			{
				var popup:AddFoodPopup = event.currentTarget as AddFoodPopup;
				
				if( event.detail == Alert.YES
					&& popup.food )
				{
					foodLibrary.addItem( popup.food );
				}
				
				updateFoods();
				
				PopUpManager.removePopUp( popup );
				
				popup.removeEventListener( CloseEvent.CLOSE, onAddFoodClose );
			}
			
			private function addFoodToLimit():void
			{
				if( !plan.foodsToLimit )  plan.foodsToLimit = new ArrayCollection();
				if( plan.foodsToLimit.getItemIndex( foodsToLimitLibrary.selectedItem ) > -1 ) return;
				
				plan.foodsToLimit.addItem( foodsToLimitLibrary.selectedItem );
				plan.foodsToLimit.refresh();
				
				foodsToLimitLibrary.selectedIndex = -1;
			}
			
			private function removeFoodToLimit():void
			{
				plan.foodsToLimit.removeItemAt( plan.foodsToLimit.getItemIndex( foodsToLimit.selectedItem ) );
				plan.foodsToLimit.refresh();
				
				foodsToLimit.selectedIndex = -1;
			}
			
			private function addFoodToIncrease():void
			{
				if( !plan.foodsToIncrease )  plan.foodsToIncrease = new ArrayCollection();
				if( plan.foodsToIncrease.getItemIndex( foodsToIncreaseLibrary.selectedItem ) > -1 ) return;
				
				plan.foodsToIncrease.addItem( foodsToIncreaseLibrary.selectedItem );
				plan.foodsToIncrease.refresh();
				
				foodsToIncreaseLibrary.selectedIndex = -1;
			}
			
			private function onClearFoodsClick( callback:Function = null ):void
			{
				var popup:DeleteConfirmation = DeleteConfirmation( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, DeleteConfirmation) as TitleWindow );
				popup.confirmationText = "Are you sure you want to clear list?";
				popup.yesText = "Clear list";
				popup.noText = "Cancel";
				popup.addEventListener( CloseEvent.CLOSE, callback );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onClearFoodToIncreaseClickClose(event:CloseEvent):void
			{
				if( event.detail == Alert.YES )
				{
					plan.foodsToIncrease = new ArrayCollection();
				}
			}
			
			private function onClearFoodToLimitClickClose(event:CloseEvent):void
			{
				if( event.detail == Alert.YES )
				{
					plan.foodsToLimit = new ArrayCollection()
				}
			}
		
			private function removeFoodToIncrease():void
			{
				plan.foodsToIncrease.removeItemAt( plan.foodsToIncrease.getItemIndex( foodsToIncrease.selectedItem ) );
				plan.foodsToIncrease.refresh();
				
				foodsToIncrease.selectedIndex = -1;
			}
			
			/*	meal library	*/
			private function addMealToMealCategory(mealCategory:MealCategory):void
			{
				var popup:AddMealPopup = AddMealPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, AddMealPopup) as TitleWindow );
				popup.mealCategory = mealCategory;
				popup.addEventListener( CloseEvent.CLOSE, onAddMealToMealCategoryClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onAddMealToMealCategoryClose(event:CloseEvent):void
			{
				var popup:AddMealPopup = event.currentTarget as AddMealPopup;
				
				if( event.detail == Alert.YES )
				{
					if( popup.mealCategory ) 
						popup.mealCategory.meals.refresh();
					plan.mealCategories.refresh();
				}
				
				PopUpManager.removePopUp( popup );
			}
			
			private function onAddMealCategoryClick(event:MouseEvent):void
			{
				var popup:AddMealCategoryPopup = AddMealCategoryPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, AddMealCategoryPopup) as TitleWindow );
				popup.categories = plan.mealCategories;
				popup.addEventListener( CloseEvent.CLOSE, onAddMealCategoryClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onAddMealCategoryClose(event:CloseEvent):void
			{
				var popup:AddMealCategoryPopup = event.currentTarget as AddMealCategoryPopup;
				
				if( event.detail == Alert.YES )
				{
					if( plan.mealCategories.length )
					{
						for(var i:int=0;i<plan.mealCategories.length;i++)
						{
							if( plan.mealCategories.getItemAt(i) as MealCategory == popup.referenceCategory )
							{
								plan.mealCategories.addItemAt( popup.category, popup.referencePosition == 'before' ? Math.max(0,i) : Math.min( plan.mealCategories.length, i+1 ) );
								
								break;
							}
						}
					}
					else
					{
						plan.mealCategories.source = [ popup.category ];
						plan.mealCategories.refresh();
					}
				}
				
				PopUpManager.removePopUp( popup );
				
				popup.removeEventListener( CloseEvent.CLOSE, onAddMealCategoryClose );
			}
			
			public function onDeleteMealCategoryClick(event:MouseEvent,item:MealCategory):void
			{
				var popup:DeleteConfirmation = DeleteConfirmation( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, DeleteConfirmation) as TitleWindow );
				popup.data = item;
				popup.noText = "Cancel";
				popup.addEventListener( CloseEvent.CLOSE, onDeleteMealCategoryClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onDeleteMealCategoryClose(event:CloseEvent):void
			{
				var popup:DeleteConfirmation = event.currentTarget as DeleteConfirmation;
				
				if( event.detail == Alert.YES
					&& popup.data is MealCategory )
				{
					if( !plan ) return;
					
					plan.mealCategories.removeItemAt( plan.mealCategories.getItemIndex( popup.data ) );
				}
				
				PopUpManager.removePopUp( popup );
				
				popup.removeEventListener( CloseEvent.CLOSE, onDeleteFoodServingsCategoryClose );
			}
			
			private function onSaveClick():void
			{
				save();
			}
			
			private function onSaveAsClick( callback:Function = null ):void
			{
				var popup:SaveMealPlanPopup = SaveMealPlanPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, SaveMealPlanPopup) as TitleWindow );
				popup.plan = plan.clone();
				popup.callback = callback;
				popup.addEventListener( CloseEvent.CLOSE, onSaveMealPlanClose );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onSaveMealPlanClose(event:CloseEvent):void
			{
				var popup:SaveMealPlanPopup = event.currentTarget as SaveMealPlanPopup;
				popup.removeEventListener( CloseEvent.CLOSE, onSaveMealPlanClose );
				
				if( event.detail == Alert.YES ) saveAs( popup.plan );
				
				if( popup.callback != null ) popup.callback();
				
				PopUpManager.removePopUp( popup );
			}
			
			private function save():void
			{
				if( isAssigned || isNew )
				{
					patient.foodPlan = plan;	
				}
				else
				{
					model.mealPlanTemplates.setItemAt( plan, selectedPlan.selectedIndex-1 );
					
					/*
					for(var i:int=0;i<model.mealPlanTemplates.length;i++)
					{
						if( model.mealPlanTemplates.getItemAt(i) == noneOption ) continue;
						
						var template:FoodPlan = model.mealPlanTemplates.getItemAt(i) as FoodPlan;
						
						if( FoodPlan(template).name.toLowerCase() == plan.name.toLowerCase() )
						{
							model.mealPlanTemplates.setItemAt( plan, i );
							
							break;
						}
					}
					*/
				}
				
				plan.dirty = false;
				
				close();
			}
			
			private function saveAs( plan:FoodPlan ):void
			{
				model.mealPlanTemplates.addItem( plan );
				initDataProvider();
			}
			
			private function onAssignClick():void
			{
				patient.foodPlan = plan;
				
				isAssigned = true;
				
				close();
			}
			
			private function onPreviewClick():void
			{
				var popup:FoodPlanPreviewPopup = FoodPlanPreviewPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, FoodPlanPreviewPopup, true) as BorderContainer );
				popup.foodPlan = plan;
				PopUpManager.centerPopUp( popup );
			}
			
			private function close():void
			{
				PopUpManager.removePopUp( this );
			}
			
			private function updateFoods():void
			{
				foodsToIncreaseAll = new ArrayCollection( foodLibrary.source.slice() );
				foodsToLimitAll = new ArrayCollection( foodLibrary.source.slice() );
				
				var food:Food;
				var libFood:Food;
				var exists:Boolean;
				
				//	make sure foods to increase are also in library
				for each(food in plan.foodsToIncrease)
				{
					exists = false;
					
					for each(libFood in foodsToIncreaseAll) 
						if( libFood.name == food.name ) exists = true;
					
					if( !exists ) foodsToIncreaseAll.addItem( food );
				}
				
				//	make sure foods to limit are also in library
				for each(food in plan.foodsToLimit)
				{
					exists = false;
					
					for each(libFood in foodsToLimitAll) 
						if( libFood.name == food.name ) exists = true;
					
					if( !exists ) foodsToLimitAll.addItem( food );
				}
				
				foodsToLimitAll.sort = alphabeticSort;
				foodsToIncreaseAll.sort = alphabeticSort;
				
				foodsToLimitAll.refresh();
				foodsToIncreaseAll.refresh();
			}
			
			private function searchFoods( text:String, list:List ):void
			{
				for(var i:int=0;i<list.dataProvider.length;i++)
				{
					var item:Object = list.dataProvider.getItemAt(i);
					
					if( item is Food
						&& (item as Food).name == text )
					{
						list.selectedItem = item;
					}
				}
			}
			
			private function showTip():void 
			{
				var foodPlanTips:FoodPlanTips = FoodPlanTips( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, FoodPlanTips) as TitleWindow );
				PopUpManager.centerPopUp(foodPlanTips);
			}
			
			private function initDataProvider():void
			{
				var plans:ArrayCollection = new ArrayCollection( model.mealPlanTemplates.source.slice() );
				
				if( plans 
					&& plans.length )
				{
					if( plans.getItemAt( 0 ).name != noneOption.name )
					{
						plans.addItemAt( noneOption, 0 );
					}
				}
				else
				{
					plans = new ArrayCollection( [ noneOption ] );
				}
				
				if( patient 
					&& patient.foodPlan ) 
				{
					plans.addItem( patient.foodPlan );
				}
				
				if( this.plans )
				{
					this.plans.source = plans.source;
				}
				else
				{
					this.plans = plans;
				}
			}
			
			private function init():void
			{
				controlBarVisible = false;
				
				initDataProvider();
				
				if( patient 
					&& patient.foodPlan ) 
				{
					selectPlan( patient.foodPlan );
				}
				
				alphabeticSort = new Sort();
				alphabeticSort.fields = [ new SortField( 'name' ) ];
				
				showTip();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="20" paddingTop="15" paddingRight="20" gap="12" horizontalAlign="left" />
	</s:layout>
	
	<s:Label text="Set Food Plan" styleName="darkGrayBold16" paddingBottom="5" />
	
	<s:VGroup>
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label text="Selected Plan:" />
			
			<s:DropDownList id="selectedPlan" width="270" height="24" dataProvider="{plans}" change="onSelectMealPlan(event)" labelField="name" labelFunction="getPlanLabel" />
			
			<s:HGroup width="100%" horizontalAlign="right">
				
				<general:MainLinkButton label="+ Add new plan" styleName="linkBtnDarkBlue" click="initNewFoodPlan()" fontSize="12" />
				
			</s:HGroup>
			
		</s:HGroup>
		
		<s:Spacer />
		
		<s:HGroup gap="-1">
			
			<s:Scroller maxHeight="340" horizontalScrollPolicy="off">
				
				<s:Group>
					<mx:TabBar id="tabs" width="101" direction="vertical" dataProvider="{tabOptions}" tabHeight="38" visible="{plan!=null}" />
				</s:Group>
				
			</s:Scroller>
			
			<s:BorderContainer backgroundColor="0xECECEC" width="364" height="340" visible="{plan!=null}">
				
				<mx:ViewStack id="views" selectedIndex="{tabs.selectedIndex}" width="100%" height="100%">
					
					<!--	description	-->
					<s:NavigatorContent>
						
						<mx:Form fontSize="12" color="0x000000" verticalGap="6">
							
							<mx:FormItem label="Plan Name:" color="0x000000" labelWidth="80" horizontalGap="5">
								<s:TextInput id="planName" text="{plan.name}" styleName="formTextField" width="239" height="24" change="plan.name=planName.text" />
							</mx:FormItem>
							
							<s:Spacer />
							
							<mx:FormItem label="Created by:" color="0x000000" labelWidth="80" horizontalGap="5">
								<s:Label id="createdBy" text="{plan.provider ? plan.provider.fullNameAbbreviated : ''}" styleName="grayText11" />
							</mx:FormItem>
							
							<mx:FormItem label="Assigned to:" color="0x000000" labelWidth="80" horizontalGap="5" visible="{isAssigned}" includeInLayout="{isAssigned}">
								<s:Label id="assignedTo" text="{plan.patient ? plan.patient.fullName : ''}" styleName="grayText11" />
							</mx:FormItem>
							
							<mx:FormItem label="Starting Date:" color="0x000000" labelWidth="80" horizontalGap="5">
								<mx:DateField id="startDateSelect" selectedDate="{plan.startDate}" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark" labelFunction="getDateLabel" />
							</mx:FormItem>
							
							<mx:FormItem label="End Date:" color="0x000000" labelWidth="80" horizontalGap="5">
								<mx:DateField id="endDateSelect" selectedDate="{plan.endDate}" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark" labelFunction="getDateLabel" />
							</mx:FormItem>
							
							<mx:FormItem label="Reasons:" color="0x000000" labelWidth="80" horizontalGap="5">
								<s:TextArea id="reason" text="{plan.reasons}" styleName="formTextField" width="239" height="46" change="plan.reasons=reason.text" />
							</mx:FormItem>
							
							<mx:FormItem label="Directions:" color="0x000000" labelWidth="80" horizontalGap="5">
								<s:TextArea id="directions" text="{plan.directions}" styleName="formTextField" width="239" height="46" change="plan.directions=directions.text" />
							</mx:FormItem>
							
						</mx:Form>
						
					</s:NavigatorContent>
					
					<!--	foods servings	-->
					<s:NavigatorContent>
						
						<s:layout>
							<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" gap="5" />
						</s:layout>
						
						<s:HGroup width="100%" horizontalAlign="{foodServingsViews.selectedIndex == 1 ? 'left' : 'right'}">
							<mx:LinkButton 
								styleName="linkBtnDarkBlue" 
								label="Manage Food Trackers »" 
								click="foodServingsViews.selectedIndex = 1;" 
								visible="{foodServingsViews.selectedIndex == 0}" includeInLayout="{foodServingsViews.selectedIndex == 0}" />
							<mx:LinkButton 
								styleName="linkBtnDarkBlue" 
								label="« Back to Food Servings" 
								click="foodServingsViews.selectedIndex = 0;" 
								visible="{foodServingsViews.selectedIndex == 1}" includeInLayout="{foodServingsViews.selectedIndex == 1}" />
						</s:HGroup>
						
						<s:Group>
							<s:Line xFrom="0" xTo="350">
								<s:stroke>
									<s:SolidColorStroke color="0x4D4D4D" weight="1"/>
								</s:stroke>
							</s:Line>
						</s:Group>
						
						<mx:ViewStack id="foodServingsViews" width="100%">
							
							<s:NavigatorContent>
								
								<s:layout>
									<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
								</s:layout>
								
								<s:Scroller width="100%" height="265" horizontalScrollPolicy="off">
									
									<s:DataGroup dataProvider="{plan.servingCategories}">
										
										<s:layout>
											<s:VerticalLayout paddingLeft="4" gap="3" />
										</s:layout>
										
										<s:itemRenderer>
											
											<fx:Component>
												
												<mx:HBox>
													<fx:Script>
														<![CDATA[
															import edu.newschool.piim.healthboard.enum.DietClassQuantifier;
															import edu.newschool.piim.healthboard.model.module.nutrition.FoodServing;
														]]>
													</fx:Script>
													
													<s:Label text="{data.title}" width="57" textAlign="right" paddingTop="5" />
													
													<s:VGroup>
														
														<s:HGroup verticalAlign="middle">
															<s:DropDownList id="quantifier" dataProvider="{outerDocument.quantifiers}" width="113" height="24" selectedIndex="{outerDocument.quantifiers.getItemIndex(data.quantifier)}" change="data.quantifier = quantifier.selectedItem" creationComplete="quantifier.enabled=!FoodServing(data).listMinMax" />
															<s:TextInput id="servingSize" text="{data.servingSize}" width="60" height="24" change="data.servingSize = servingSize.text" textAlign="right" />
															<s:Label text="{data.unit}" color="0x666666" fontSize="12" />
														</s:HGroup>
														
														<s:HGroup verticalAlign="middle" visible="{FoodServing(data).listMinMax}" includeInLayout="{FoodServing(data).listMinMax}">
															<s:DropDownList id="quantifier2" dataProvider="{outerDocument.quantifiers}" selectedIndex="{outerDocument.quantifiers.getItemIndex(DietClassQuantifier.MAXIMUM)}" width="113" height="24" enabled="false" />
															<s:TextInput id="servingSizeMaximum" text="{FoodServing(data).servingSizeMax}" width="60" height="24" change="data.servingSizeMax = servingSizeMaximum.text" textAlign="right" />
															<s:Label text="{FoodServing(data).unit}" color="0x666666" fontSize="12" />
														</s:HGroup>
														
													</s:VGroup>
													
												</mx:HBox>
												
											</fx:Component>
											
										</s:itemRenderer>
										
									</s:DataGroup>
									
								</s:Scroller>
								
							</s:NavigatorContent>
							
							<s:NavigatorContent width="100%">
								
								<s:layout>
									<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
								</s:layout>
								
								<s:Scroller id="servingList" width="100%" maxHeight="240" horizontalScrollPolicy="off">
									
									<s:DataGroup width="100%" dataProvider="{plan.servingCategories}">
										
										<s:layout>
											<s:VerticalLayout gap="0" />
										</s:layout>
										
										<s:itemRenderer>
											
											<fx:Component>
												
												<mx:HBox>
													<fx:Script>
														<![CDATA[
															import edu.newschool.piim.healthboard.model.module.nutrition.FoodServing;
														]]>
													</fx:Script>
													<s:CheckBox label="{data.title + (data.unit ? ' (' + data.unit + ')' : null)}" width="{outerDocument.servingList.verticalScrollBar.visible?225:245}" selected="true" />
													<mx:LinkButton styleName="linkBtnGray" label="Delete" click="outerDocument.onDeleteFoodServingsCategoryClick(event, data as FoodServing)" />
												</mx:HBox>
												
											</fx:Component>
											
										</s:itemRenderer>
										
									</s:DataGroup>
									
								</s:Scroller>
								
								<mx:LinkButton styleName="linkBtnDarkBlue" label="+ Add more Food Tracker" click="onAddFoodServingsCategoryClick(event)" />
								
							</s:NavigatorContent>
							
						</mx:ViewStack>
						
					</s:NavigatorContent>
					
					<!--	food to increase	-->
					<s:NavigatorContent>
						
						<s:HGroup paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
							
							<s:VGroup width="148">
								
								<s:Label text="Food to Increase" color="0x4D4D4D" fontSize="12" fontWeight="bold" />
								
								<s:HGroup width="100%" height="12" verticalAlign="middle">
									
									<s:Label text="{foodsToIncrease.dataProvider.length} selected" color="0x4D4D4D" fontSize="12" />
									
									<s:HGroup width="100%" horizontalAlign="right">
										<mx:LinkButton styleName="linkBtnDarkBlue" label="Clear list" click="onClearFoodsClick(onClearFoodToIncreaseClickClose)" />
									</s:HGroup>
									
								</s:HGroup>
								
								<s:HGroup gap="-1" verticalAlign="middle">
									<components1:AutoComplete id="foodsToIncreaseSearch" styleName="mediumGray12Italic" dataProvider="{plan.foodsToIncrease}" labelField="name" width="123" height="24" prefixOnly="false" forceOpen="false" select="searchFoods(foodsToIncreaseSearch.text,foodsToIncrease)" />
									<s:Button styleName="searchButtonIcon" width="24" height="24" />
								</s:HGroup>
								
								<s:List id="foodsToIncrease" width="148" height="262" dataProvider="{plan.foodsToIncrease}" labelField="name" />
								
							</s:VGroup>
							
							<s:VGroup height="100%" verticalAlign="middle">
								<s:Button label="&gt;" width="30" height="30" enabled="{foodsToIncrease.selectedItem!=null}" click="removeFoodToIncrease()" />
								<s:Button label="&lt;" width="30" height="30" enabled="{foodsToIncreaseLibrary.selectedItem!=null}" click="addFoodToIncrease()" />
							</s:VGroup>
							
							<s:VGroup>
								
								<s:Label text="Food Library" color="0x4D4D4D" fontSize="12" fontWeight="bold" />
								
								<s:HGroup width="100%" height="12" verticalAlign="middle">
									
									<s:Label text="{foodsToIncreaseLibrary.dataProvider.length} total" color="0x4D4D4D" fontSize="12" />
									
									<s:HGroup width="100%" horizontalAlign="right">
										<mx:LinkButton styleName="linkBtnDarkBlue" label="+ Add food" click="addNewFood();" />
									</s:HGroup>
									
								</s:HGroup>
								
								<s:HGroup gap="-1" verticalAlign="middle">
									<components1:AutoComplete id="foodsToIncreaseLibrarySearch" styleName="mediumGray12Italic" dataProvider="{foodsToIncreaseAll}" labelField="name" width="123" height="24" prefixOnly="false" forceOpen="false" select="searchFoods(foodsToIncreaseLibrarySearch.text,foodsToIncreaseLibrary)" />
									<s:Button styleName="searchButtonIcon" width="24" height="24" />
								</s:HGroup>
								
								<s:List id="foodsToIncreaseLibrary" width="148" height="262" dataProvider="{foodsToIncreaseAll}" click="onFoodListClick(event)" labelField="name"/>
								
							</s:VGroup>
							
						</s:HGroup>
						
					</s:NavigatorContent>
					
					<!--	food to limit	-->
					<s:NavigatorContent>
						
						<s:HGroup paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
							
							<s:VGroup width="148">
								
								<s:Label text="Food to Limit" color="0x4D4D4D" fontSize="12" fontWeight="bold" />
								
								<s:HGroup width="100%" height="12" verticalAlign="middle">
									
									<s:Label text="{foodsToLimit.dataProvider.length} selected" color="0x4D4D4D" fontSize="12" />
									
									<s:HGroup width="100%" horizontalAlign="right">
										<mx:LinkButton styleName="linkBtnDarkBlue" label="Clear list" click="onClearFoodsClick(onClearFoodToIncreaseClickClose);" />
									</s:HGroup>
									
								</s:HGroup>
								
								<s:HGroup gap="-1" verticalAlign="middle">
									<components1:AutoComplete id="foodsToLimitSearch" styleName="mediumGray12Italic" dataProvider="{plan.foodsToLimit}" labelField="name" width="123" height="24" prefixOnly="false" forceOpen="false" select="searchFoods(foodsToLimitSearch.text,foodsToLimit)" />
									<s:Button styleName="searchButtonIcon" width="24" height="24" />
								</s:HGroup>
								
								<s:List id="foodsToLimit" width="148" height="262" dataProvider="{plan.foodsToLimit}" labelField="name" />
								
							</s:VGroup>
							
							<s:VGroup height="100%" verticalAlign="middle">
								<s:Button label="&gt;" width="30" height="30" enabled="{foodsToLimit.selectedItem!=null}" click="removeFoodToLimit()" />
								<s:Button label="&lt;" width="30" height="30" enabled="{foodsToLimitLibrary.selectedItem!=null}" click="addFoodToLimit()" />
							</s:VGroup>
							
							<s:VGroup>
								
								<s:Label text="Food Library" color="0x4D4D4D" fontSize="12" fontWeight="bold" />
								
								<s:HGroup width="100%" height="12" verticalAlign="middle">
									
									<s:Label text="{foodsToLimitLibrary.dataProvider.length} total" color="0x4D4D4D" fontSize="12" />
									
									<s:HGroup width="100%" horizontalAlign="right">
										<mx:LinkButton styleName="linkBtnDarkBlue" label="+ Add food" click="addNewFood();" />
									</s:HGroup>
									
								</s:HGroup>
								
								<s:HGroup gap="-1" verticalAlign="middle">
									<components1:AutoComplete id="foodsToLimitLibrarySearch" styleName="mediumGray12Italic" dataProvider="{foodsToLimitAll}" labelField="name" width="123" height="24" prefixOnly="false" forceOpen="false" select="searchFoods(foodsToLimitLibrarySearch.text,foodsToLimitLibrary)"  />
									<s:Button styleName="searchButtonIcon" width="24" height="24" click="searchFoods(foodsToLimitSearch.text,foodsToLimitLibrary)" />
								</s:HGroup>
								
								<s:List id="foodsToLimitLibrary" width="148" height="262" dataProvider="{foodsToLimitAll}" click="onFoodListClick(event)" labelField="name" />
								
							</s:VGroup>
							
						</s:HGroup>
						
					</s:NavigatorContent>
					
					<!--	meal library	-->
					<s:NavigatorContent>
						
						<s:layout>
							<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
						</s:layout>
						
						<s:HGroup width="100%" visible="{mealLibraryViews.selectedIndex == 0}" includeInLayout="{mealLibraryViews.selectedIndex == 0}">
							
							<s:HGroup gap="-10" verticalAlign="middle">
								<general:TextInputPlaceholder placeholder="Search food recipes" fontSize="11" fontStyle="italic" color="0x999999" contentBackgroundAlpha="0" paddingLeft="7" paddingTop="5" width="166" height="24" />
								<s:Button styleName="searchButtonIcon" width="24" height="24" />
							</s:HGroup>
							
							<s:HGroup width="100%" horizontalAlign="right" gap="2" >
								<mx:LinkButton styleName="linkBtnDarkBlue" label="Manage meal categories  »" click="mealLibraryViews.selectedIndex = 1" />
							</s:HGroup>

						</s:HGroup>
						
						<mx:LinkButton styleName="linkBtnDarkBlue" label="« Return to Suggested Meals List" click="mealLibraryViews.selectedIndex = 0" visible="{mealLibraryViews.selectedIndex == 1}" includeInLayout="{mealLibraryViews.selectedIndex == 1}" />
						
						<mx:ViewStack id="mealLibraryViews" width="100%" creationComplete="initViewStack()">
							
							<fx:Script>
								<![CDATA[
									import edu.newschool.piim.healthboard.model.module.nutrition.Meal;
									
									[Bindable] private var meal:Meal;
									
									public function onMealAction( event:MealEvent ):void
									{
										if( event.type == MealEvent.EDIT )
										{
											var popup:AddMealPopup = AddMealPopup( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, AddMealPopup) as TitleWindow );
											popup.meal = event.meal;
											popup.mode = AddMealPopup.MODE_EDIT;
											popup.addEventListener( CloseEvent.CLOSE, onAddMealToMealCategoryClose );
											PopUpManager.centerPopUp( popup );
										}
										else if( event.type == MealEvent.REMOVE )
										{
											event.mealCategory.meals.removeItemAt( event.mealCategory.meals.getItemIndex( event.meal ) );
											event.mealCategory.meals.refresh();
										}
										
										//plan.mealCategories.source = mealCategoriesCopy.source; 
									}
									
									private function initViewStack():void
									{
										addEventListener( MealEvent.EDIT, onMealAction );
										addEventListener( MealEvent.REMOVE, onMealAction );
									}
								]]>
							</fx:Script>
							
							<s:NavigatorContent>
								
								<mx:Accordion width="100%" height="270" >
								
									<mx:Repeater id="mealList" width="100%" minHeight="270" dataProvider="{plan.mealCategories}">
										
										<mx:VBox width="100%" label="{mealList.currentItem.name}" color="0x4D4D4D" fontSize="12" paddingLeft="10" paddingTop="10" paddingRight="10">
											
											<mx:HBox width="100%" horizontalAlign="right">
												<general:MainLinkButton styleName="linkBtnDarkBlue" label="Add meal to {mealList.currentItem.name}" click="addMealToMealCategory(event.currentTarget.getRepeaterItem() as MealCategory)" />
											</mx:HBox>
											
											<s:DataGroup dataProvider="{mealList.currentItem.meals}" width="100%">
												
												<s:layout>
													<s:VerticalLayout />
												</s:layout>
												
												<s:itemRenderer>
													
													<fx:Component>
														
														<mx:VBox width="100%">
															
															<fx:Script>
																<![CDATA[
																	import edu.newschool.piim.healthboard.view.components.popups.DeleteConfirmation;
																	
																	import edu.newschool.piim.healthboard.events.MealEvent;
																	
																	import flash.net.navigateToURL;
																	
																	import edu.newschool.piim.healthboard.model.module.nutrition.Meal;
																	import edu.newschool.piim.healthboard.model.module.nutrition.MealCategory;
																	
																	import mx.controls.Alert;
																	import mx.events.CloseEvent;
																	import mx.managers.PopUpManager;
																	
																	import spark.events.IndexChangeEvent;
																	import spark.components.TitleWindow;
																	
																	private function onMealAction(event:IndexChangeEvent):void
																	{
																		var index:int = DropDownList(event.currentTarget).selectedIndex;
																		
																		var evt:MealEvent;
																		
																		if( index == 0 )
																		{
																			evt = new MealEvent( MealEvent.EDIT, true, false );
																		}
																		else if( index == 1 )
																		{
																			var popup:DeleteConfirmation = DeleteConfirmation( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, DeleteConfirmation) as TitleWindow );
																			popup.data = data as Meal;
																			popup.addEventListener( CloseEvent.CLOSE, onDeleteConfirmClose );
																			
																			PopUpManager.centerPopUp( popup );
																		}
																		
																		if( evt )
																		{
																			evt.mealCategory = outerDocument.mealList.getRepeaterItem() as MealCategory;
																			evt.meal = data as Meal;
																			dispatchEvent( evt );
																		}
																		
																		DropDownList(event.currentTarget).selectedIndex = -1;
																	}
																	
																	private function onDeleteConfirmClose(event:CloseEvent):void
																	{
																		var popup:DeleteConfirmation = event.currentTarget as DeleteConfirmation;
																		
																		if( event.detail == Alert.YES
																			&& popup.data is Meal )
																		{
																			var evt:MealEvent = new MealEvent( MealEvent.REMOVE, true, false );
																			evt.mealCategory = outerDocument.mealList.currentItem as MealCategory;
																			evt.meal = popup.data as Meal;
																			
																			dispatchEvent( evt );
																		}
																		
																		PopUpManager.removePopUp( popup );
																		
																		popup.removeEventListener( CloseEvent.CLOSE, onDeleteConfirmClose );
																	}
																]]>
															</fx:Script>
															
															<mx:HBox width="100%">
																
																<mx:VBox>
																	<s:Label text="{Meal(data).description}" width="200" color="0x000000" maxDisplayedLines="{-1}"  lineBreak="toFit" />
																	<general:MainLinkButton styleName="linkBtnDarkBlue" label="{data.link}" click="navigateToURL(new URLRequest(data.link),'_blank')" visible="{data.link!=null}" textAlign="left" />
																</mx:VBox>
																
																<mx:HBox width="100%" horizontalAlign="right" verticalAlign="middle">
																	<s:Label text="Actions" color="0x064E71" />
																	<s:DropDownList dropShadowVisible="false" dataProvider="{outerDocument.model.mealActions}" change="onMealAction(event)" skinClass="edu.newschool.piim.healthboard.view.skins.general.HealthFocusOptionsDropDownListSkin" color="0x064E71" rollOverColor="0xAEDBE2" selectionColor="0xAEDBE2" width="20" fontSize="12" />
																</mx:HBox>
																
															</mx:HBox>
															
															<s:Group>
																<s:Line xFrom="0" xTo="298">
																	<s:stroke>
																		<s:SolidColorStroke color="0x4E4E4E" weight="1"/>
																	</s:stroke>
																</s:Line>
															</s:Group>
															
														</mx:VBox>
														
													</fx:Component>
													
												</s:itemRenderer>
												
											</s:DataGroup>
												
										</mx:VBox>
										
									</mx:Repeater>
								
								</mx:Accordion>
								
							</s:NavigatorContent>
							
							<s:NavigatorContent width="100%">
								
								<s:layout>
									<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
								</s:layout>
								
								<s:Scroller width="100%" maxHeight="300" horizontalScrollPolicy="off">
									
									<s:DataGroup width="100%" dataProvider="{plan.mealCategories}">
										
										<s:layout>
											<s:VerticalLayout gap="0" />
										</s:layout>
										
										<s:itemRenderer>
											
											<fx:Component>
												
												<mx:HBox>
													<fx:Script>
														<![CDATA[
															import edu.newschool.piim.healthboard.model.module.nutrition.MealCategory;
														]]>
													</fx:Script>
													
													<s:CheckBox label="{data.name}" width="250" selected="true" />
													<general:MainLinkButton styleName="linkBtnGray" label="Delete" click="outerDocument.onDeleteMealCategoryClick(event, data as MealCategory)" />
												
												</mx:HBox>
												
											</fx:Component>
											
										</s:itemRenderer>
										
									</s:DataGroup>
									
								</s:Scroller>
								
								<general:MainLinkButton styleName="linkBtnDarkBlue" label="+ Add more Meal Category" click="onAddMealCategoryClick(event)" />
								
							</s:NavigatorContent>
							
						</mx:ViewStack>
						
					</s:NavigatorContent>
					
				</mx:ViewStack>
				
			</s:BorderContainer>
			
		</s:HGroup>
		
	</s:VGroup>
	
	<s:HGroup paddingLeft="125" width="100%" horizontalAlign="right">
		
		<s:HGroup width="465">
			
			<s:Button label="Back" width="45" height="24" click="tabs.selectedIndex-=1" enabled="{tabs.selectedIndex>0}" />
			<s:Button label="Next" width="45" height="24" click="tabs.selectedIndex+=1" enabled="{tabs.selectedIndex&lt;tabs.dataProvider.length-1}"  />
			
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<!--<s:Image source="@Embed(source='/images/checkmarkNextSteps.png')" visible="{!isNew &amp;&amp; !plan.dirty}" />-->
				<s:Button label="Preview" width="65" height="24" click="onPreviewClick();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" enabled="{plan!=null}"/>
				<s:Button label="Assign" width="60" height="24" click="onAssignClick();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" enabled="{!isAssigned}" />
				<s:Button label="Save" width="55" height="24" click="onSaveClick();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" enabled="{plan!=null&amp;&amp;plan.dirty}" />
				<s:Button label="Save As" width="65" height="24" click="onSaveAsClick();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" enabled="{plan!=null}" />
				<s:Button label="Cancel" width="58" height="24" click="close();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" />
			</s:HGroup>
			
		</s:HGroup>
		
	</s:HGroup>
	
	
</s:TitleWindow>
