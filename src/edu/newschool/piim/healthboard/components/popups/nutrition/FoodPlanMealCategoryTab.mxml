<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:general="edu.newschool.piim.healthboard.view.components.general.*" 
	width="100%" height="100%" 
	creationComplete="init()">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import edu.newschool.piim.healthboard.events.MealEvent;
			
			import edu.newschool.piim.healthboard.model.ProviderNutritionModel;
			import edu.newschool.piim.healthboard.model.module.nutrition.Meal;
			import edu.newschool.piim.healthboard.model.module.nutrition.MealCategory;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] public var model:ProviderNutritionModel = ProviderNutritionModel(AppProperties.getInstance().controller.nutritionController.model);
			[Bindable] public var mealCategories:ArrayCollection;
			
			private var _mealCategory:MealCategory;
			
			import edu.newschool.piim.healthboard.model.module.nutrition.Meal;
			
			[Bindable] private var meal:Meal;
			
			
			public function get mealCategory():MealCategory
			{
				return _mealCategory;
			}

			[Bindable]
			public function set mealCategory(value:MealCategory):void
			{
				_mealCategory = value;
			}

			override protected function commitProperties():void
			{
				super.commitProperties();
			}
			
			private function saveMeal():void
			{
				var meal:Meal = this.meal ? this.meal : new Meal( null, description.text, link.text );
				
				if( !this.meal )
				{
					if( mealCategory.meals )
						mealCategory.meals.addItem( meal );
					else
						mealCategory.meals = new ArrayCollection( [meal] );
				}
				
				mealCategories.refresh(); 
				
				views.selectedIndex = 0;
				
				invalidateProperties();
			}
			
			private function onMealAction( event:MealEvent ):void
			{
				event.stopImmediatePropagation();
				
				if( event.type == MealEvent.EDIT )
				{
					meal = event.meal;
					views.selectedIndex = 1;
				}
				else if( event.type == MealEvent.REMOVE )
				{
					event.mealCategory.meals.removeItemAt( event.mealCategory.meals.getItemIndex( event.meal ) );
				}
				else if( event.type == MealEvent.DUPLICATE )
				{
					event.mealCategory.meals.addItem( new Meal( event.meal.name, event.meal.description, event.meal.link ) );
				}
				
				event.mealCategory.meals.refresh();
				
				mealCategories.refresh(); 
				
				invalidateProperties();
			}
			
			private function init():void
			{
				addEventListener( MealEvent.DUPLICATE, onMealAction );
				addEventListener( MealEvent.EDIT, onMealAction );
				addEventListener( MealEvent.REMOVE, onMealAction );
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
	</s:layout>
	
	<s:HGroup width="100%">
		
		<s:HGroup gap="-1" verticalAlign="middle">
			<general:TextInputPlaceholder placeholder="Search food recipes" fontSize="11" fontStyle="italic" color="0x999999" contentBackgroundAlpha="0" paddingLeft="7" paddingTop="5" width="166" height="24" />
			<s:Button styleName="searchButtonIcon" width="24" height="24" />
		</s:HGroup>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="bottom" gap="2">
			<mx:LinkButton styleName="linkBtnDarkBlue" label="+ Add new meal" click="meal = null;views.selectedIndex=1" />
		</s:HGroup>
		
	</s:HGroup>
	
	<mx:ViewStack id="views">
		
		<s:NavigatorContent width="100%">
			
			<s:Label text="No meals to show" visible="{!mealCategory.meals || !mealCategory.meals.length}" includeInLayout="{!mealCategory.meals || !mealCategory.meals.length}" />
			
			<s:Scroller width="100%" height="100%" focusEnabled="false" visible="{mealCategory.meals &amp;&amp; mealCategory.meals.length}" includeInLayout="{mealCategory.meals &amp;&amp; mealCategory.meals.length}" >
				
				<s:Group>
					
					<s:List width="100%" height="100%" dataProvider="{mealCategory.meals}" horizontalScrollPolicy="off" visible="{mealCategory.meals &amp;&amp; mealCategory.meals.length}">
						
						<s:itemRenderer>
							
							<fx:Component>
								
								<mx:VBox paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
									<fx:Script>
										<![CDATA[
											import edu.newschool.piim.healthboard.view.components.popups.DeleteConfirmation;
											
											import edu.newschool.piim.healthboard.events.MealEvent;
											
											import edu.newschool.piim.healthboard.model.module.nutrition.Meal;
											import edu.newschool.piim.healthboard.model.module.nutrition.MealCategory;
											
											import mx.controls.Alert;
											import mx.events.CloseEvent;
											import mx.managers.PopUpManager;
											
											import spark.components.TitleWindow;
											import spark.events.IndexChangeEvent;
											
											private function onMealAction(event:IndexChangeEvent,meal:Meal):void
											{
												var index:int = DropDownList(event.currentTarget).selectedIndex;
												
												var evt:MealEvent;
												
												if( index == 0 )
												{
													evt = new MealEvent( MealEvent.EDIT, true, false );
												}
												else if( index == 1 )
												{
													var popup:DeleteConfirmation = DeleteConfirmation( PopUpManager.createPopUp(AppProperties.getInstance().controller.application, DeleteConfirmation) as TitleWindow );
													popup.data = meal;
													popup.addEventListener( CloseEvent.CLOSE, onDeleteConfirmClose );
													
													PopUpManager.centerPopUp( popup );
												}
												else if( index == 2 )
												{
													evt = new MealEvent( MealEvent.DUPLICATE, true, false );
												}
												
												if( evt )
												{
													evt.mealCategory = outerDocument.mealCategory;
													evt.meal = meal;
													dispatchEvent( evt );
												}
												
												DropDownList(event.currentTarget).selectedIndex = -1;
											}
											
											private function onDeleteConfirmClose(event:CloseEvent):void
											{
												var popup:DeleteConfirmation = event.currentTarget as DeleteConfirmation;
												
												if( event.detail == Alert.YES
													&& popup.data is Meal )
												{
													var evt:MealEvent = new MealEvent( MealEvent.REMOVE, true, false );
													evt.mealCategory = outerDocument.mealCategory;
													evt.meal = popup.data as Meal;
													
													dispatchEvent( evt );
												}
												
												PopUpManager.removePopUp( popup );
												
												popup.removeEventListener( CloseEvent.CLOSE, onDeleteConfirmClose );
											}
										]]>
									</fx:Script>
									
									<mx:HBox width="100%">
										
										<s:Label text="{outerDocument.mealCategory.meals.getItemIndex(data) + 1})" paddingTop="4" />
										
										<mx:VBox>
											<s:TextArea text="{data.description}" width="200" heightInLines="{NaN}" editable="false" borderVisible="false" />
											<mx:LinkButton styleName="linkBtnDarkBlue" label="{data.name ? data.name : data.link}" click="navigateToURL(new URLRequest(data.link),'_blank')" visible="{data.link!=null}" textAlign="left" />
										</mx:VBox>
										
										<mx:HBox width="100%" horizontalAlign="right">
											<s:DropDownList dropShadowVisible="false" dataProvider="{outerDocument.model.mealActions}" change="onMealAction(event,data as Meal)" skinClass="edu.newschool.piim.healthboard.view.skins.general.HealthFocusOptionsDropDownListSkin" color="0x074F72" rollOverColor="0xAEDBE2" selectionColor="0xAEDBE2" width="19" fontSize="12" />
										</mx:HBox>
										
									</mx:HBox>
									
									<s:Group>
										<s:Line xFrom="0" xTo="298">
											<s:stroke>
												<s:SolidColorStroke color="0x4E4E4E" weight="1"/>
											</s:stroke>
										</s:Line>
									</s:Group>
									
								</mx:VBox>
								
							</fx:Component>
							
						</s:itemRenderer>
						
					</s:List>
					
				</s:Group>
				
			</s:Scroller>
			
		</s:NavigatorContent>
		
		<s:NavigatorContent width="100%">
			
			<mx:Form paddingBottom="0" paddingTop="0">
				
				<mx:FormItem label="Category:" color="0x000000" labelWidth="75">
					<s:DropDownList id="mealCategorySelect" width="225" dataProvider="{mealCategories}" labelField="name" selectedItem="{mealCategories.getItemAt(0)}" />
				</mx:FormItem>
				
				<mx:FormItem label="Description:" color="0x000000" labelWidth="75">
					<general:TextAreaPlaceholder id="description" width="225" height="78" text="{meal.description ? meal.description : ''}" />										
				</mx:FormItem>
				
				<mx:FormItem label="Link to recipe:" color="0x000000" labelWidth="75">
					<general:TextInputPlaceholder id="link" width="225" height="24" text="{meal.link ? meal.link : ''}"/>										
				</mx:FormItem>
				
				<s:HGroup width="100%" horizontalAlign="right">
					<s:Button label="Submit" width="55" height="24" click="saveMeal();" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" />
					<s:Button label="Cancel" width="55" height="24" click="meal = null; views.selectedIndex = 0" skinClass="edu.newschool.piim.healthboard.view.skins.general.IconButtonSkin" />
				</s:HGroup>
				
			</mx:Form>
			
		</s:NavigatorContent>
		
	</mx:ViewStack>
	
</s:NavigatorContent>
