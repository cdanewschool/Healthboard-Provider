<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	autoDrawBackground="false" 
	resizeMode="noScale" minWidth="0" minHeight="0"
	added="onAdded()" removed="onRemoved()" 
	creationComplete="init()" implements="edu.newschool.piim.healthboard.view.components.calendar.renderer.ICalendarDayItemRenderer"
	dataChange="onDataChange(event)">
	
	<fx:Script>
		<![CDATA[
			import edu.newschool.piim.healthboard.components.appointments.ProviderOverviewItem;
			import edu.newschool.piim.healthboard.controller.MainController;
			import edu.newschool.piim.healthboard.model.ProviderModel;
			import edu.newschool.piim.healthboard.model.TeamAppointmentsModel;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			private var dirty:Boolean;
			
			private var _appointments:ArrayCollection;
			
			private var _selectable:Boolean;
			
			[Bindable]
			public function set selectable(value:Boolean):void{ _selectable = value; }
			public function get selectable():Boolean { return _selectable; }
			
			public function set appointments(value:ArrayCollection):void { _appointments = value; }
			public function get appointments():ArrayCollection { return _appointments; }
			
			public function get date():Date{ return data as Date; }

			private function onDataChange(event:FlexEvent=null):void
			{
				if( !dirty || !data ) return;
				
				var providers:ArrayCollection = TeamAppointmentsModel( MainController( AppProperties.getInstance().controller ).teamAppointmentsController.model ).selectedProviders;
				
				var day:Date = new Date();
				day.time = date.time;
				dateLabel.text = day.date.toString();
				
				providerList.removeAllElements();
				
				for each(var provider:ProviderModel in providers)
				{
					var overview:ProviderOverviewItem = new ProviderOverviewItem();
					overview.provider = provider;
					overview.day = day;
					overview.width = 76;
					overview.height = providerList.height / providers.length;
					providerList.addElement( overview );
				}
				
				updateState();
				
				dirty = false;
			}
			
			private function updateState():void
			{
				if( dateLabel ) dateLabel.styleName = selected ? 'monthDayLabelSelected' : 'monthDayLabel';
				if( providerList && border ) providerList.alpha = border.alpha = selected ? 1 : .45;
			}
			
			override public function set width(value:Number):void
			{
				super.width = value;
			}
			
			override public function set selected(value:Boolean):void
			{
				super.selected = value;
				
				updateState();
			}
			
			private function onProvidersChange(event:CollectionEvent=null):void
			{
				dirty = true;
				
				onDataChange();
			}
			
			private function onAdded():void
			{
				TeamAppointmentsModel( MainController( AppProperties.getInstance().controller ).teamAppointmentsController.model ).selectedProviders.addEventListener(CollectionEvent.COLLECTION_CHANGE, onProvidersChange );	
			}
			
			private function onRemoved():void
			{
				TeamAppointmentsModel( MainController( AppProperties.getInstance().controller ).teamAppointmentsController.model ).selectedProviders.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onProvidersChange );	
			}
			
			private function init():void
			{
				removeEventListener( FlexEvent.CREATION_COMPLETE, init );
				onProvidersChange();
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer id="border" width="{width}" height="{height}" borderColor="0xffffff" backgroundAlpha="0" minWidth="0" minHeight="0">
		
		<s:layout>
			<s:BasicLayout  />
		</s:layout>
		
		<mx:Label id="dateLabel" width="100%"/>
		
		<s:VGroup id="providerList" gap="2" x="10" y="25" height="60" />
		
	</s:BorderContainer>
	
</s:ItemRenderer>
