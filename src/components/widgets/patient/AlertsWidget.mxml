<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	initialize="init()">
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import ASfiles.ProviderConstants;
			
			import components.popups.AddNotePopup;
			
			import controllers.MainController;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			
			import spark.collections.SortField;
			import spark.components.DropDownList;
			import spark.components.Label;
			import spark.events.IndexChangeEvent;
			
			import util.DateFormatters;
			import util.DateUtil;
			
			[Bindable] private var controller:MainController = MainController( AppProperties.getInstance().controller );
			
 			private var _alerts:ArrayCollection;
			
			private var allAlerts:ArrayCollection;
			
			private var moduleAlerts:ArrayCollection;
			
			private var _activeModule:String;
			
			private var dirty:Boolean;
			
			private var restrictToModule:Boolean = true;
			
			private var _showInactive:Boolean = false;
			
			private var timeFormatter:DateFormatter;
			
			private var today:Date;
			
			private var sort:Sort;
			
			public function get showInactive():Boolean
			{
				return _showInactive;
			}

			public function set showInactive(value:Boolean):void
			{
				_showInactive = value;
				
				updateDataProvider();
				
				invalidateProperties();
				
				dirty = true;
			}

			[Bindable]
			public function get alerts():ArrayCollection
			{
				return _alerts;
			}
			
			public function set alerts(value:ArrayCollection):void
			{
				if( _alerts )
				{
					alerts.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onAlertsChange );
				}
				
				_alerts = value;
				
				if( _alerts )
				{
					alerts.addEventListener(CollectionEvent.COLLECTION_CHANGE, onAlertsChange );
					
					onAlertsChange();
				}
			}

			public function get activeModule():String
			{
				return _activeModule;
			}

			public function set activeModule(value:String):void
			{
				_activeModule = value;
				
				restrictToModule = true;
				
				dirty = true;
				
				invalidateProperties();
			}

			private function onAlertsChange(event:CollectionEvent=null):void
			{
				allAlerts = new ArrayCollection( _alerts.source );
				allAlerts.filterFunction = filter;
				allAlerts.sort = sort;
				
				moduleAlerts = new ArrayCollection( _alerts.source );
				moduleAlerts.filterFunction = filterByModule;
				moduleAlerts.sort = sort;
				
				datagrid
				dirty = true;
				
				invalidateProperties();
			}
			
			private function filter( item:Object ):Boolean
			{
				//	always hide if item is inactive and we're not showing all
				if( !showInactive && item.status == 'inactive' ) return false;
				
				return true;
			}
			
			private function filterByModule( item:Object ):Boolean
			{
				if( !filter(item) ) return false;
				
				//	otherwise, if no module is set show
				if( !activeModule ) return true;
				
				var type:String = item.type;
				
				//	always show internal notes
				if( item.alert == 'Internal Note' ) return true;
				
				//	TODO: make id based, not case-senstitive
				if( activeModule == Constants.MODULE_APPOINTMENTS )
					return type == "Appointments";
				else if( activeModule == ProviderConstants.MODULE_DECISION_SUPPORT )
					return type == "Decision Support";
				else if( activeModule == Constants.MODULE_EXERCISE )
					return type == "Exercise";
				else if( activeModule == Constants.MODULE_IMMUNIZATIONS )
					return type == "Immunizations";
				else if( activeModule == Constants.MODULE_MEDICAL_RECORDS )
					return type == "Medical Records";
				else if( activeModule == Constants.MODULE_MEDICATIONS )
					return type == "Medications";
				else if( activeModule == Constants.MODULE_MESSAGES )
					return type == "Messages";
				else if( activeModule == Constants.MODULE_NUTRITION )
					return type == "Nutrition";
				else if( activeModule == Constants.MODULE_VITAL_SIGNS )
					return type == "Vital Signs";
				
				return false;
			}
			
			private function onAlertsWidgetDropDownChange(event:IndexChangeEvent):void
			{
				if( event.newIndex == 0 )
				{
					var popup:AddNotePopup = PopUpManager.createPopUp( AppProperties.getInstance().controller.application, AddNotePopup ) as AddNotePopup;
					popup.moduleID = activeModule;
					popup.addEventListener( CloseEvent.CLOSE, onAddInternalNote );
					PopUpManager.centerPopUp( popup );
				}
				else if( event.newIndex == 1 )
				{
					showInactive = !showInactive;
				}
				
				(event.currentTarget as DropDownList).selectedIndex = -1;
			}
			
			private function onAddInternalNote(event:CloseEvent):void
			{
				var popup:AddNotePopup = event.currentTarget as AddNotePopup;
				
				if( event.detail == Alert.YES )
				{
					var alert:Object = { alert: "Internal Note", date: new Date(), description: popup.description.text, type: "All" };
					
					if( popup.allModulesSelected )
					{
						controller.model.patientAlerts.addItemAt( alert, 0 );
					}
					else
					{
						for(var i:int=0;i<popup.selectedModuleIDs.length;i++)
						{
							alert = 
							{
								alert: "Internal Note", 
								date: new Date(), 
								description: popup.description.text, 
								type: AppProperties.getInstance().controller.getModuleTitle( popup.selectedModuleIDs[i] ) 
							};
							
							controller.model.patientAlerts.addItemAt( alert, 0 );
						}
					}
				}
				
				PopUpManager.removePopUp( popup );
			}
			
			override protected function commitProperties():void
			{
				if( dirty )
				{
					if( allAlerts ) allAlerts.refresh();
					if( moduleAlerts ) moduleAlerts.refresh();
					
					datagrid.dataProvider = activeModule && restrictToModule ? moduleAlerts : allAlerts;
					
					subTitleDisplay.removeEventListener( MouseEvent.CLICK, onSubtitleClick );
					
					if( activeModule ) subTitleDisplay.addEventListener( MouseEvent.CLICK, onSubtitleClick );
					
					var isFiltered:Boolean = activeModule != null && restrictToModule;
					
					(titleDisplay as Label).setStyle( 'color', isFiltered ? 0xF2902B : 0xFFFFFF );
					(subTitleDisplay as Label).setStyle( 'color', !isFiltered ? 0xF2902B : 0xFFFFFF );
					(titleDisplay as Label).setStyle( 'fontWeight', isFiltered || !activeModule ? 'bold' : 'normal' );
					(subTitleDisplay as Label).setStyle( 'fontWeight', !isFiltered ? 'bold' : 'normal' );
					
					(subTitleDisplay as Label).visible = activeModule != null;
					
					title = (activeModule ? AppProperties.getInstance().controller.getModuleTitle(activeModule) : "Health Focus") + ( moduleAlerts && moduleAlerts.length ? " (" + moduleAlerts.length + ")" : '' ); 
					subtitle = activeModule ? "|   View All Alerts (" + allAlerts.length + ")" : '';
					
					dirty = false;
				}
				
				super.commitProperties();
			}
			
			private function updateDataProvider():void
			{
				dropDownDataProvider = new ArrayCollection
					(
						[
							'     Add New Internal Note',
							'     View ' + (showInactive ? 'Active':'All')
						]
					);
			}
			
			private function onTitleClick( event:MouseEvent ):void
			{
				restrictToModule = true;
				
				dirty = true;
				
				invalidateProperties();
			}
			
			private function onSubtitleClick( event:MouseEvent ):void
			{
				restrictToModule = false;
				
				dirty = true;
				
				invalidateProperties();
			}
			
			public function getDateLabel(item:Object,column:DataGridColumn):String
			{
				var diff:Number = today.time - item.date.time;
				
				if( diff < DateUtil.DAY || diff < 0 ) return timeFormatter.format( item.date );
				if( diff < DateUtil.DAY * 2 ) return 'Yesterday';
				
				return DateFormatters.dateFormatter.format( item.date );
			}
			
			private function onItemClick(event:ListEvent):void
			{
				dispatchEvent( event );
			}
			
			private function init():void
			{
				today = AppProperties.getInstance().controller.model.today;
				
				titleDisplay.addEventListener( MouseEvent.CLICK, onTitleClick );
				(titleDisplay as Label).buttonMode = true;
				(subTitleDisplay as Label).buttonMode = true;
				
				timeFormatter = new DateFormatter();
				timeFormatter.formatString = "L:NN A";
				
				addEventListener( IndexChangeEvent.CHANGE, onAlertsWidgetDropDownChange );
				dropDownChangeCallback = onAlertsWidgetDropDownChange;
				
				sort = new Sort();
				sort.fields = [ new SortField('date',true,true) ];
				
				updateDataProvider();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:DataGrid 
		id="datagrid"
		styleName="standardDataGridSolid"
		width="100%" 
		borderVisible="false" 
		horizontalScrollPolicy="off" 
		rowCount="5" rowHeight="22" itemClick="onItemClick(event)">
		<mx:columns>
			<mx:DataGridColumn dataField="urgency" headerText="Urgency" width="68" fontFamily="myMyriad" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox width="68" horizontalAlign="center">
							<fx:Script>
								<![CDATA[
									import enum.UrgencyType;
								]]>
							</fx:Script>
							<s:Image source="@Embed('/images/messagesUrgentSmall.png')" toolTip="Urgent" visible="{data.urgency == UrgencyType.URGENT}" includeInLayout="{data.urgency == UrgencyType.URGENT}" />
							<s:Image source="@Embed('/images/messagesSomewhatUrgentSmall.png')" toolTip="Somewhat urgent" visible="{data.urgency == UrgencyType.SOMEWHAT_URGENT}" includeInLayout="{data.urgency == UrgencyType.SOMEWHAT_URGENT}" />
							<s:Image source="@Embed('/images/internalNoteIcon.png')" toolTip="Internal Note" visible="{data.alert == 'Internal Note'}" includeInLayout="{data.alert == 'Internal Note'}" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn dataField="date" headerText="Time" width="86" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColor" fontFamily="myMyriad" paddingLeft="5" labelFunction="getDateLabel" />
			<mx:DataGridColumn dataField="type" headerText="Type" width="102" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColor" fontFamily="myMyriad"  paddingLeft="5" />
			<mx:DataGridColumn dataField="alert" headerText="Alert" width="143" itemRenderer="components.itemrenderers.datagridcolumn.CustomRowColor" fontFamily="myMyriad"  paddingLeft="5" />
			<mx:DataGridColumn dataField="description" headerText="Description" paddingLeft="5" fontFamily="myMyriad">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox width="100%" paddingTop="0" horizontalScrollPolicy="off">
							<fx:Script>
								<![CDATA[
									import components.itemrenderers.datagridcolumn.CustomRowColor;
								]]>
							</fx:Script>
							<mx:Label text="{data.description}" color="{data.status=='inactive' ? CustomRowColor.INACTIVE_COLOR : CustomRowColor.ACTIVE_COLOR}" />
							<s:Spacer width="100%" />
							<s:HGroup paddingTop="7" paddingLeft="-7" paddingRight="7" alpha=".6">
								<s:Image source="@Embed('/images/btnHealthFocusMsg.png')" toolTip="Click to send message" buttonMode="true" /><!--click="nutDeleteHandler(event)"-->
								<s:Image source="@Embed('/images/btnHealthFocusComplete.png')" toolTip="Click to mark complete" buttonMode="true" /><!--click="nutDeleteHandler(event)"-->
							</s:HGroup>
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	
</enhancedtitlewindow:EnhancedTitleWindow>
