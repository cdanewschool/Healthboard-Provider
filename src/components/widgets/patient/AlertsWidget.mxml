<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import ASfiles.ProviderConstants;
			
			import events.EnhancedTitleWindowEvent;
			
			import external.collapsibleTitleWindow.skins.EnhancedTitleWindowSkin;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			
			import spark.components.Label;
			
 			private var _alerts:ArrayCollection;
			
			private var allAlerts:ArrayCollection;
			private var moduleAlerts:ArrayCollection;
			
			private var _activeModule:String;
			
			private var dirty:Boolean;
			
			private var restrictToModule:Boolean = true;
			
			[Bindable]
			public function get alerts():ArrayCollection
			{
				return _alerts;
			}
			
			public function set alerts(value:ArrayCollection):void
			{
				_alerts = value;
				
				if( _alerts )
				{
					allAlerts = new ArrayCollection( _alerts.source );
					
					moduleAlerts = new ArrayCollection( _alerts.source );
					moduleAlerts.filterFunction = filterByModule;
					
					invalidateProperties();
					
					dirty = true;
				}
			}

			public function get activeModule():String
			{
				return _activeModule;
			}

			public function set activeModule(value:String):void
			{
				_activeModule = value;
				
				restrictToModule = true;
				
				dirty = true;
				
				invalidateProperties();
			}

			private function filterByModule( item:Object ):Boolean
			{
				if( !activeModule ) return true;
				
				var type:String = item.type;
				
				if( activeModule == Constants.MODULE_APPOINTMENTS )
					return type == "Appointments";
				else if( activeModule == Constants.MODULE_MEDICATIONS )
					return type == "Medications";
				else if( activeModule == Constants.MODULE_IMMUNIZATIONS )
					return type == "Immunizations";
				
				return false;
			}
			
			override protected function commitProperties():void
			{
				if( dirty )
				{
					if( alerts )
					{
						moduleAlerts.refresh();
						
						datagrid.dataProvider = activeModule && restrictToModule ? moduleAlerts : allAlerts;
					}
					
					subTitleDisplay.removeEventListener( MouseEvent.CLICK, onSubtitleClick );
					
					if( activeModule ) subTitleDisplay.addEventListener( MouseEvent.CLICK, onSubtitleClick );
					
					(titleDisplay as Label).setStyle( 'color', activeModule ? 0xF2902B : 0xFFFFFF );
					
					(subTitleDisplay as Label).visible = activeModule != null;
					
					title = (activeModule ? AppProperties.getInstance().controller.getModuleTitle(activeModule) : "Health Focus") + ( moduleAlerts && moduleAlerts.length ? " (" + moduleAlerts.length + ")" : '' ); 
					subtitle = activeModule ? "|   View All Alerts (" + allAlerts.length + ")" : '';
					
					dirty = false;
				}
				
				super.commitProperties();
			}
			
			private function onTitleClick( event:MouseEvent ):void
			{
				restrictToModule = true;
				
				dirty = true;
				
				invalidateProperties();
			}
			
			private function onSubtitleClick( event:MouseEvent ):void
			{
				restrictToModule = false;
				
				dirty = true;
				
				invalidateProperties();
			}
			
			private function onItemClick(event:ListEvent):void
			{
				dispatchEvent( event );
			}
			
			private function onSubtitleRollOver(event:MouseEvent):void
			{
				//(subTitleDisplay as Label).styleName  = "linkBtnUnderline";
			}
			
			private function onSubtitleRollOut(event:MouseEvent):void
			{
				//(subTitleDisplay as Label).styleName  = "linkBtn";
			}
			
			private function init():void
			{
				titleDisplay.addEventListener( MouseEvent.CLICK, onTitleClick );
				
				subTitleDisplay.addEventListener( MouseEvent.ROLL_OVER, onSubtitleRollOver );
				subTitleDisplay.addEventListener( MouseEvent.ROLL_OUT, onSubtitleRollOut );
				
				(titleDisplay as Label).setStyle( 'fontWeight', 'bold' );
				(subTitleDisplay as Label).setStyle( 'color', 0xFFFFFF );
				
				(titleDisplay as Label).buttonMode = true;
				(subTitleDisplay as Label).buttonMode = true;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:DataGrid 
		id="datagrid"
		fontFamily="myMyriadNoCFF"
		width="100%" 
		color="0xFFFFFF" verticalAlign="middle"
	 	headerBackgroundSkin="skins.general.CustomDataGridHeaderBackgroundSkin" headerSeparatorSkin="mx.skins.ProgrammaticSkin" headerStyleName="dataGridHeader"
		borderVisible="false" 
		alternatingItemColors="[0x3C3C3B,0x3C3C3B]" rollOverColor="0x31535E" textRollOverColor="0xFFFFFF" selectionColor="0x31535E" textSelectedColor="0xFFFFFF"
		horizontalGridLines="true" horizontalGridLineColor="0x444442" horizontalScrollPolicy="off" 
		rowCount="5" rowHeight="22" itemClick="onItemClick(event)">
		<mx:columns>
			<mx:DataGridColumn dataField="urgency" headerText="Urgency" width="68">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox width="68" horizontalAlign="center">
							<s:Image source="@Embed('images/messagesUrgentSmall.png')" toolTip="Urgent" visible="{data.urgency == 'Urgent'}" includeInLayout="{data.urgency == 'Urgent'}" />
							<s:Image source="@Embed('images/messagesSomewhatUrgentSmall.png')" toolTip="Somewhat urgent" visible="{data.urgency == 'Somewhat urgent'}" includeInLayout="{data.urgency == 'Somewhat urgent'}" />
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn dataField="date" headerText="Time" width="86" />
			<mx:DataGridColumn dataField="type" headerText="Type" width="102" />
			<mx:DataGridColumn dataField="alert" headerText="Alert" width="143" />
			<mx:DataGridColumn dataField="description" headerText="Description" paddingLeft="5" fontFamily="myMyriad">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox width="100%" paddingTop="0" horizontalScrollPolicy="off">
							<mx:Label text="{data.description}" />
							<s:Spacer width="100%" />
							<s:HGroup paddingTop="7" paddingLeft="-7" paddingRight="7" alpha=".6">
								<s:Image source="@Embed('images/btnHealthFocusMsg.png')" toolTip="Click to send message" buttonMode="true" /><!--click="nutDeleteHandler(event)"-->
								<s:Image source="@Embed('images/btnHealthFocusComplete.png')" toolTip="Click to mark complete" buttonMode="true" /><!--click="nutDeleteHandler(event)"-->
							</s:HGroup>
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	
</enhancedtitlewindow:EnhancedTitleWindow>
