<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	width="305" 
	creationComplete="init()">
	
	<enhancedtitlewindow:states>
		<s:State name="default" />
		<s:State name="connecting" />
		<s:State name="connected" />
		<s:State name="declined" />
	</enhancedtitlewindow:states>
	
	<fx:Metadata>
		[Event(name="showAutocomplete", type="events.AutoCompleteEvent")]
		[Event(name="hideAutocomplete", type="events.AutoCompleteEvent")]
	</fx:Metadata>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.popups.ChatHistoryPopup;
			import components.popups.ViewAttachmentPopup;
			
			import controllers.ChatController;
			
			import events.ApplicationEvent;
			import events.AuthenticationEvent;
			import events.AutoCompleteEvent;
			import events.ChatEvent;
			
			import models.Chat;
			import models.ChatSearch;
			import models.FileUpload;
			import models.UserModel;
			
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.List;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable] private var model:ChatSearch;
			
			[Bindable] public var user:UserModel;
			[Bindable] private var targetUser:UserModel;
			
			private var chatPopup:IFlexDisplayObject;
			private var popup:IFlexDisplayObject;
			
			private function onGroupSelect(event:IndexChangeEvent):void
			{
				model.selectedChatGroup = DropDownList(event.currentTarget).selectedIndex;
				
				showResults();
			}
			
			private function chat(event:IndexChangeEvent):void
			{
				if( !targetUser ) return;
				
				model.mode = ButtonBar(event.currentTarget).selectedItem.data;
				
				ChatController.getInstance().chat( user, targetUser );
			}
			
			private function viewHistory(event:MouseEvent):void
			{
				//	launch history popup
				if( popup) PopUpManager.removePopUp( popup );
				
				popup = new ChatHistoryPopup();
				ChatHistoryPopup(popup).user = user;
				ChatHistoryPopup(popup).chat = model;
				
				PopUpManager.addPopUp( popup, DisplayObject(mx.core.FlexGlobals.topLevelApplication), true );
				PopUpManager.centerPopUp( popup );
			}
			
			private function onSearchChange(event:TextOperationEvent):void
			{
				model.searchText = TextInput(event.currentTarget).text;
			}
			
			private function showResults():void
			{
				var evt:AutoCompleteEvent = new AutoCompleteEvent( AutoCompleteEvent.SHOW, true );
				evt.dataProvider = model.dataProvider;
				evt.targetField = search;
				evt.desiredWidth = searchBox.width;
				evt.callbackFunction = selectResult;
				evt.labelFunction = getDisplayName;
				
				dispatchEvent( evt );
			}
			
			protected function selectResult(event:IndexChangeEvent):void
			{
				var user:UserModel = List(event.currentTarget).selectedItem;
				
				targetUser = user;
				
				search.text = user.fullName;
				
				dispatchEvent( new AutoCompleteEvent( AutoCompleteEvent.HIDE, true ) );
				
				stage.focus = null;
			}
			
			private function getDisplayName(item:UserModel):String
			{
				return item.firstName + ' ' + item.lastName;
			}
			
			private function onChatStateChange(event:ChatEvent):void
			{
				currentState = ChatSearch(event.currentTarget).state;
			}
			
			private function onChatCancel(event:ChatEvent):void
			{
				chatType.selectedItem = null;
				search.text = "";
			}
			
			private function init():void
			{
				model = ChatController.getInstance().model;
				
				search.text = ChatSearch.SEARCH_PLACEHOLDER;
				filterGroup.selectedIndex = 0;
				
				ChatController.getInstance().model.addEventListener( ChatEvent.STATE_CHANGE, onChatStateChange );
				ChatController.getInstance().model.addEventListener( ChatEvent.CANCEL, onChatCancel );
			}
			
		]]>
	</fx:Script>
	
	<enhancedtitlewindow:layout>
		<s:VerticalLayout />
	</enhancedtitlewindow:layout>
	
	<s:VGroup gap="5" paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
		
		<s:HGroup gap="10">
			
			<s:DropDownList id="filterGroup" dataProvider="{model.chatGroups}" width="75" change="onGroupSelect(event)" labelField="firstName" styleName="dropDownListDark" />
			
			<s:HGroup id="searchBox" gap="-1">
				<s:TextInput id="search" includeIn="default" styleName="{search.text == ChatSearch.SEARCH_PLACEHOLDER ? 'searchPlaceholder' : 'whiteText11'}" contentBackgroundAlpha="0" paddingLeft="7" paddingTop="5" width="174" height="24" focusIn="showResults()" change="onSearchChange(event)" click="{if(search.text == ChatSearch.SEARCH_PLACEHOLDER) search.text=''}" />
				<s:Label includeIn="connecting" text="{targetUser.fullName} - Connecting..." width="164" height="24" fontSize="10" enabled="false" color="0xFFFFFF" paddingTop="5"/>
				<s:Label includeIn="declined" text="{targetUser.fullName} - Not online" width="164" height="24" fontSize="10" enabled="false" color="0xFFFFFF" paddingTop="5"/>
				<s:Label includeIn="connected" text="{targetUser.fullName} - Connected" width="164" height="24" fontSize="10" enabled="false" color="0xFFFFFF" paddingTop="5"/>
				<s:Button styleName="searchButtonIcon" width="24" height="24" fontSize="10" />
			</s:HGroup>
			
		</s:HGroup>
		
		<s:Line xFrom="0" xTo="280">
			<s:stroke>
				<s:SolidColorStroke color="0x676767" weight="1" />
			</s:stroke>
		</s:Line>
		
		<s:HGroup gap="5">
			
			<s:HGroup gap="3">
				<s:ButtonBar 
					id="chatType" styleName="greyButtonBar"
					width="210" dataProvider="{Chat.MODES}" iconField="icon" labelField="label" change="chat(event)" enabled="{targetUser!=null}"
					firstButton="skins.general.IconButtonSkin"
					middleButton="skins.general.IconButtonSkin" 
					lastButton="skins.general.IconButtonSkin" fontSize="11">
					
					<s:layout>
						<s:ButtonBarHorizontalLayout gap="1" />
					</s:layout>
					
				</s:ButtonBar>
					
				<!--
				<s:Button width="62" height="22" label="Text" icon="@Embed('images/button_icons/text.png')" iconPlacement="left" click="chat( ChatModel.MODE_TEXT )" fontSize="11" enabled="{model.user!=null}" />  
				<s:Button width="62" height="22" label="Voice" icon="@Embed('images/button_icons/voice.png')" iconPlacement="left" click="chat( ChatModel.MODE_VOICE )" fontSize="11" enabled="{model.user!=null}" />
				<s:Button width="62" height="22" label="Video" icon="@Embed('images/button_icons/video.png')" iconPlacement="left" click="chat( ChatModel.MODE_VIDEO )" fontSize="11" enabled="{model.user!=null}" />
				-->
			</s:HGroup>
			
			<mx:LinkButton styleName="linkBtnBlue" label="View History" click="viewHistory(event)" />
			
		</s:HGroup>
		
	</s:VGroup>
	
</enhancedtitlewindow:EnhancedTitleWindow>
