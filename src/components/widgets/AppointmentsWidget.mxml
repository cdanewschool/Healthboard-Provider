<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	title="Appointments ({appointments?appointments.length:0})" 
	creationComplete="init()" titleBarHeight="30"
	width="100%" height="100%">
	
	<fx:Declarations>
		<mx:SolidColorStroke id="xAxisStroke" color="0xB3B3B3" alpha=".1" />
		<mx:SolidColorStroke id="whiteStroke" color="0xffffff" alpha="1" weight="0" />
		
		<fx:Array id="gridBackground">
			
			<mx:GridLines  
				horizontalChangeCount="1" verticalChangeCount="1"
				horizontalTickAligned="false" verticalTickAligned="true"
				gridDirection="both">
				
				<mx:horizontalOriginStroke>
					<mx:SolidColorStroke color="0x3C3C3B" alpha="0" />
				</mx:horizontalOriginStroke>
				
				<mx:verticalOriginStroke>
					<mx:SolidColorStroke color="0x3C3C3B" alpha="0" />
				</mx:verticalOriginStroke>
				
				<mx:horizontalFill>
					<mx:SolidColor color="0x3C3C3B" alpha="1"  />
				</mx:horizontalFill>
				
				<mx:horizontalAlternateFill>
					<s:SolidColor color="0x333333" />
				</mx:horizontalAlternateFill>
				
				<mx:horizontalStroke>
					<mx:SolidColorStroke weight="1" color="0xCCCCCC" alpha=".2" />
				</mx:horizontalStroke>
				
				<mx:verticalStroke>
					<mx:SolidColorStroke weight="1" color="0xCCCCCC" alpha=".2" />
				</mx:verticalStroke>
				
			</mx:GridLines>
			
		</fx:Array>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import controllers.ApplicationController;
			import controllers.AppointmentsController;
			
			import flashx.textLayout.elements.Configuration;
			import flashx.textLayout.elements.LinkElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.events.FlowElementMouseEvent;
			import flashx.textLayout.formats.TextDecoration;
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import models.Appointment;
			import models.ProviderModel;
			import models.UserModel;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.AxisBase;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.items.BarSeriesItem;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			import mx.events.CollectionEvent;
			import mx.graphics.IFill;
			
			import spark.components.BorderContainer;
			import spark.utils.TextFlowUtil;
			
			import utils.DateUtil;
			
			private var controller:AppointmentsController;
			
			[Bindable] public var appointments:ArrayCollection;
			[Bindable] private var providers:ArrayCollection;
			
			private var today:Date = ApplicationController.getInstance().today;
			
			private var nextAppointment:Appointment;
			
			private function onAppointmentsChange( event:CollectionEvent = null ):void
			{
				appointments = controller.getAppointments( -1, null, today );
				
				chart.dataProvider = appointments;
				
				var p:Array = new Array();
				for each(var a:Appointment in appointments)
				{
					if( p.indexOf( a.provider ) == -1 )
					{
						p.push( a.provider );
					}
				}
				
				if( appointments.length )
				{
					nextAppointment = Appointment( appointments[0] );
					
					var txt:String = nextAppointment.toString( true );
					txt = txt.replace( /\n/g, "<br/>");
					
					nextAppointmentInfo.textFlow = TextFlowUtil.importFromString( txt );
				}
				
				providers = new ArrayCollection( p );
			}
			
			private function getProviderName(categoryValue:Object, previousCategoryValue:Object, axis:CategoryAxis, categoryItem:Object):String
			{
				return categoryItem.fullName;
			}
			
			private function valueFunction(series:Series, item:Appointment, fieldName:String):Object 
			{
				if( fieldName == "xValue" 
					&& series.id=="appointmentTime" )
					return( item.to.hours * DateUtil.HOUR + item.to.minutes * DateUtil.MINUTE );
				else if( fieldName == "yValue" 
					&& series.id=="appointmentTime" )
					return(item.provider.id);
				else if( fieldName == "minValue" 
					&& series.id=="appointmentTime" )
					return( item.from.hours * DateUtil.HOUR + item.from.minutes * DateUtil.MINUTE );
				
				else
					return null;
			}
			
			private function getTimeLabel(item:Object, prevValue:Object, axis:IAxis):String 
			{
				var hours:int = Math.floor( int(item)/DateUtil.HOUR );
				
				if( hours >= 10 ) return hours.toString() + '00';
				
				return '0' + hours.toString() + '00';
			}
			
			private function getFill(element:ChartItem, index:Number):IFill 
			{
				var appointment:Appointment = Appointment( appointments.getItemAt( index ) );
				return controller.getFill( appointment.isPending ? Appointment.TYPE_PENDING : appointment.type, 90 );
			}
			
			private function verticalAxisCategoryFunction(axis:AxisBase, item:ProviderModel):Object 
			{
				return(item.id);
			}
			
			public function onLinkClick(event:FlowElementMouseEvent):void
			{
				var link:Array = LinkElement(event.flowElement).href.split(',');
				var action:String = link[0];
				
				if( action == 'showPatient' )
				{
					var id:int = parseInt( link[1] );
					var patient:UserModel = ApplicationController.getInstance().getUser( id, UserModel.TYPE_PATIENT );
					
					//	TODO: show patient
				}
				else if( action == "showPrerequisite"
						&& nextAppointment )
				{
					AppointmentsController.getInstance().showPrerequisites( nextAppointment );
				}
				
				event.preventDefault();
			}
			
			private function init():void
			{
				controller = AppointmentsController.getInstance();
				controller.model.appointments.addEventListener( CollectionEvent.COLLECTION_CHANGE, onAppointmentsChange ); 
				onAppointmentsChange();
				
				for each(var type:Object in Appointment.APPOINTMENT_TYPES)
				{
					var container:HGroup = new HGroup();
					container.verticalAlign = "middle";
					
					var swatch:BorderContainer = new BorderContainer();
					swatch.setStyle('borderColor', 0xFFFFFF);
					swatch.backgroundFill = controller.getFill( type.value );
					swatch.width = swatch.height = 10;
					container.addElement( swatch );
					
					var label:Label = new Label();
					label.text = type.label;
					label.styleName = "whiteText11";
					container.addElement( label );
					
					legend.addElement( container );
				}
				
				nextAppointmentInfo.textFlow.addEventListener( FlowElementMouseEvent.CLICK, onLinkClick );
				
				subtitle = DateUtil.DATE_FORMATTER_DAY.format( today );
			}
		]]>
	</fx:Script>
	
	<enhancedtitlewindow:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="0" paddingRight="10" paddingBottom="10" gap="0" />
	</enhancedtitlewindow:layout>
	
	<s:HGroup width="100%" gap="15" paddingTop="7">
		
		<s:VGroup>
			<s:BorderContainer borderColor="0xBBBDBF" borderWeight="1" width="40" height="51">
				<mx:Image id="profilePic" source="images/patients/tiny/glover.jpg" />
			</s:BorderContainer>
		</s:VGroup>
		
		<s:VGroup paddingTop="3">
			
			<s:HGroup>
				<s:RichEditableText id="nextAppointmentInfo" styleName="white12" editable="false" lineHeight="18" />
			</s:HGroup>
			
		</s:VGroup>
		
	</s:HGroup>
	
	<s:HGroup paddingTop="7" paddingBottom="5">
		<s:Line xFrom="0" xTo="610">
			<s:stroke>
				<s:SolidColorStroke color="0x676767" weight="1" />
			</s:stroke>
		</s:Line>
	</s:HGroup>
	
	<mx:BarChart id="chart" dataProvider="{appointments}" showDataTips="false" backgroundElements="{gridBackground}" width="622" height="87" barWidthRatio=".4">
		
		<mx:horizontalAxis>
			<mx:LinearAxis id="xAxis" minimum="{DateUtil.HOUR*6}" maximum="{DateUtil.HOUR*17}" labelFunction="getTimeLabel" interval="{DateUtil.HOUR}" />
		</mx:horizontalAxis>
		
		<mx:verticalAxis>
			<mx:CategoryAxis id="yAxis" dataProvider="{providers}" dataFunction="verticalAxisCategoryFunction" labelFunction="getProviderName" ticksBetweenLabels="false" />
		</mx:verticalAxis>
		
		<mx:series>
			<mx:BarSeries
				id="appointmentTime"
				dataFunction="valueFunction" minField="x"
				fillFunction="getFill" />
		</mx:series>
		
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{xAxis}" axisStroke="{xAxisStroke}" styleName="white12" showLine="true" placement="top" tickPlacement="none" minorTickPlacement="none" labelAlign="center"/>
		</mx:horizontalAxisRenderers>
		
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{yAxis}" styleName="blue12" showLine="false" tickPlacement="none" minorTickPlacement="none" placement="left"  />
		</mx:verticalAxisRenderers>
		
	</mx:BarChart>
	
	<s:Line xFrom="0" xTo="610">
		<s:stroke>
			<s:SolidColorStroke color="0x676767" weight="1" />
		</s:stroke>
	</s:Line>
	
	<s:HGroup id="legend" gap="61" paddingTop="9" />
	
</enhancedtitlewindow:EnhancedTitleWindow>