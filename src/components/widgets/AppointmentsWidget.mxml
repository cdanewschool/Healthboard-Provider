<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	title="Appointments ({appointments?appointments.length:0})" 
	creationComplete="init()" 
	width="100%" height="100%">
	
	<fx:Declarations>
		<mx:SolidColorStroke id="xAxisStroke" color="0xB3B3B3" alpha=".1" />
		<mx:SolidColorStroke id="yAxisStroke" color="0x86888A" alpha="1" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import controllers.AppointmentsController;
			
			import models.Appointment;
			import models.ProviderModel;
			import models.UserModel;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.AxisBase;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.items.BarSeriesItem;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			import mx.events.CollectionEvent;
			import mx.graphics.IFill;
			
			import spark.components.BorderContainer;
			
			import utils.DateUtil;
			
			private var controller:AppointmentsController;
			
			[Bindable] public var appointments:ArrayCollection;
			[Bindable] private var providers:ArrayCollection;
			
			private function onAppointmentsChange( event:CollectionEvent = null ):void
			{
				appointments = controller.getAppointments( 123, UserModel.TYPE_PATIENT );
				
				chart.dataProvider = appointments;
				
				var p:Array = new Array();
				for each(var a:Appointment in appointments)
				{
					if( p.indexOf( a.provider ) == -1 )
					{
						p.push( a.provider );
					}
				}
				
				providers = new ArrayCollection( p );
			}
			
			private function getProviderName(item:ProviderModel):String
			{
				return item.fullName;
			}
			
			private function valueFunction(series:Series, item:Appointment, fieldName:String):Object 
			{
				if( fieldName == "xValue" 
					&& series.id=="appointmentTime" )
					return( item.to.hours * DateUtil.HOUR + item.to.minutes * DateUtil.MINUTE );
				else if( fieldName == "yValue" 
					&& series.id=="appointmentTime" )
					return(item.provider.fullName);
				else if( fieldName == "minValue" 
					&& series.id=="appointmentTime" )
					return( item.from.hours * DateUtil.HOUR + item.from.minutes * DateUtil.MINUTE );
				
				else
					return null;
			}
			
			private function getTimeLabel(item:Object, prevValue:Object, axis:IAxis):String 
			{
				var hours:int = Math.floor( int(item)/DateUtil.HOUR );
				
				if( hours >= 10 ) return hours.toString() + '00';
				
				return '0' + hours.toString() + '00';
			}
			
			private function getFill(element:ChartItem, index:Number):IFill 
			{
				var appointment:Appointment = Appointment( appointments.getItemAt( index ) );
				
				return controller.getFill( appointment.type );
			}
			
			private function verticalAxisCategoryFunction(axis:AxisBase, item:ProviderModel):Object 
			{
				return(item.fullName);
			}
			
			private function init():void
			{
				controller = AppointmentsController.getInstance();
				controller.model.appointments.addEventListener( CollectionEvent.COLLECTION_CHANGE, onAppointmentsChange ); 
				onAppointmentsChange();
				
				for each(var type:Object in Appointment.APPOINTMENT_TYPES)
				{
					var container:HGroup = new HGroup();
					container.verticalAlign = "middle";
					
					var swatch:BorderContainer = new BorderContainer();
					swatch.setStyle('borderColor', 0xFFFFFF);
					swatch.backgroundFill = controller.getFill( type.value );
					swatch.width = swatch.height = 10;
					container.addElement( swatch );
					
					var label:Label = new Label();
					label.text = type.label;
					label.styleName = "whiteText11";
					container.addElement( label );
					
					legend.addElement( container );
				}
			}
		]]>
	</fx:Script>
	
	<enhancedtitlewindow:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" gap="10" />
	</enhancedtitlewindow:layout>
	
	<s:HGroup width="100%" height="51" gap="5">
		
		<s:VGroup paddingTop="10">
			<s:BorderContainer borderColor="0xBBBDBF" borderWeight="1" width="40" height="51">
				<mx:Image id="profilePic" source="images/patients/small/glover.jpg" />
			</s:BorderContainer>
		</s:VGroup>
		
		<s:VGroup paddingLeft="40">
			
			<s:HGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
	</s:HGroup>
	
	<s:Line xFrom="20" xTo="{width-40}">
		<s:stroke>
			<s:SolidColorStroke color="0x676767" weight="1" />
		</s:stroke>
	</s:Line>
	
	<mx:BarChart id="chart" dataProvider="{appointments}" showDataTips="false" width="100%" height="90">
		
		<mx:horizontalAxis>
			<mx:LinearAxis id="xAxis" minimum="{DateUtil.HOUR*6}" maximum="{DateUtil.HOUR*17}" labelFunction="getTimeLabel" interval="{DateUtil.HOUR}" />
		</mx:horizontalAxis>
		
		<mx:verticalAxis>
			<mx:CategoryAxis id="yAxis" dataProvider="{providers}" dataFunction="verticalAxisCategoryFunction" />
		</mx:verticalAxis>
		
		<mx:series>
			<mx:BarSeries
				id="appointmentTime"
				displayName="asdfs"
				dataFunction="valueFunction" minField="x"
				fillFunction="getFill"
				/>
		</mx:series>
		
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{xAxis}" axisStroke="{xAxisStroke}" styleName="white12" showLine="true" placement="top" tickPlacement="none" minorTickPlacement="none" />
		</mx:horizontalAxisRenderers>
		
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{yAxis}" axisStroke="{yAxisStroke}" styleName="blue12" showLine="true" tickPlacement="none" minorTickPlacement="none" />
		</mx:verticalAxisRenderers>
		
	</mx:BarChart>
	
	<s:HGroup id="legend" gap="40" />
	
</enhancedtitlewindow:EnhancedTitleWindow>
