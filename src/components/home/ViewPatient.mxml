<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*"
	xmlns:widgets="components.widgets.*"
	xmlns:radarchart="fr.kapit.radarchart.*"
	xmlns:patient="components.widgets.patient.*" 
	xmlns:modules="modules.*"
	xmlns:modules1="components.modules.*" 
	creationComplete="init();">
	
	<s:layout>
		<s:VerticalLayout paddingTop="15"/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import ASfiles.ProviderConstants;
			
			import controllers.Controller;
			import controllers.MainController;
			
			import events.ApplicationEvent;
			import events.EnhancedTitleWindowEvent;
			
			import external.collapsibleTitleWindow.components.enhancedtitlewindow.EnhancedTitleWindow;
			
			import models.PatientModel;
			import models.modules.ExerciseModel;
			
			import mx.collections.ArrayCollection;
			import mx.core.Container;
			import mx.core.INavigatorContent;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Group;
			
			import util.DateFormatters;
			
			public static const STATE_DEFAULT:String = "default";
			public static const STATE_MODULE:String = "module";
			
			private const WIDGET_ALERTS:String = "alerts";
			private const WIDGET_APPOINTMENTS:String = "appointments";
			private const WIDGET_DECISION_SUPPORT:String = "decisionSupport";
			private const WIDGET_EXERCISE:String = "exercise";
			private const WIDGET_IMMUNIZATIONS:String = "immunizations";
			private const WIDGET_MEDICAL_RECORDS:String = "medicalRecords";
			private const WIDGET_MEDICATIONS:String = "medications";
			private const WIDGET_NUTRITION:String = "nutrition";
			private const WIDGET_PATIENT_PROFILE:String = "patientProfile";
			private const WIDGET_RECENT_ACTIVITIES:String = "recentActivities";
			private const WIDGET_VITAL_SIGNS:String = "vitalSigns";
			
			private var WIDGET_IDS:Array = 
				[
					WIDGET_ALERTS, WIDGET_APPOINTMENTS, WIDGET_DECISION_SUPPORT, WIDGET_EXERCISE, 
					WIDGET_IMMUNIZATIONS, WIDGET_MEDICAL_RECORDS, WIDGET_MEDICATIONS, WIDGET_NUTRITION, 
					WIDGET_PATIENT_PROFILE, WIDGET_RECENT_ACTIVITIES, WIDGET_VITAL_SIGNS
				];
			
			[Bindable] private var controller:MainController = MainController( AppProperties.getInstance().controller );
			
			private function onResize(event:Event=null):void
			{
				if( !this.stage ) return;
				
				var coords:Point = new Point( x, y );
				coords = localToGlobal( coords );
				
				scroller.height = this.stage.stageHeight - coords.y - scroller.y - 100;
			}
			
			private var activeWidget:EnhancedTitleWindow;
			
			private var stateDirty:Boolean;
			
			[Bindable] [Embed("/images/btnWidgetTriggerOpen.png")] public var widgetTriggerOpen:Class;
			[Bindable] [Embed("/images/btnWidgetTriggerClose.png")] public var widgetTriggerClose:Class;
			
 			private var _activeModuleID:String;
			
			private var _selectedAppointment:Object;
			private var _patient:PatientModel;
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( stateDirty )
				{
					for(var i:int=0;i<WIDGET_IDS.length;i++)
					{
						var widgetID:String = WIDGET_IDS[i];
						var widget:EnhancedTitleWindow = getWidgetByID( widgetID );
						var trigger:Group = this[ widgetID + 'Trigger' ] as Group;
						
						if( !widget || !trigger ) throw new Error('Widget or associated trigger does not exist');
						
						widget.showCloseButton = widgetID != WIDGET_ALERTS && currentState == STATE_DEFAULT ? widgetLibrary.visible : false;
						
						var showTrigger:Boolean = currentState == STATE_MODULE ? widget.module != null : true;
						var widgetVisible:Boolean = widget.visible || currentState == STATE_MODULE;
						
						trigger.visible = trigger.includeInLayout = showTrigger;
						
						trigger.getChildAt(0).visible = UIComponent(trigger.getChildAt(0)).includeInLayout = widgetVisible;
						trigger.getChildAt(1).visible = UIComponent(trigger.getChildAt(1)).includeInLayout = !widgetVisible;
					}
					
					var showModules:Boolean = false;
					
					if( currentState == STATE_MODULE )
					{
						showModules = true;
						
						if( !moduleContainer.processedDescriptors )
						{
							moduleContainer.createDeferredContent();
						}
						else
						{
							CursorManager.removeBusyCursor();
						}
						
						try
						{
							var module:INavigatorContent = moduleContainer.getChildByName( activeModuleID ) as INavigatorContent;
							moduleContainer.selectedChild = module;
						}
						catch(e:Error)
						{
							CursorManager.removeBusyCursor();
							
							showModules = false;
						}
					}
					
					if( moduleContainer ) moduleContainer.visible = moduleContainer.includeInLayout = showModules;
					
					moduleContainer.verticalScrollPosition = 0;
					
					stateDirty = false;
				}
				
				if( activeModuleID )
				{
					moduleTitle.text = AppProperties.getInstance().controller.getModuleTitle( activeModuleID );
				}
				
				label = patient.fullName;

				alertsWidget.activeModule = activeModuleID;
				
				EnhancedTitleWindow(nutritionWidget).subtitle = DateFormatters.dateFormatterDay.format( new Date() );
				
				patientProfileWidget.patient = patient;
				patientProfileWidget.maxHeight = activeModuleID?156:NaN;
				patientProfileWidget.width = activeModuleID?314:304;
				patientProfileWidget.showDetails = activeModuleID == null;
				
				widgetContainer.minHeight = activeModuleID ? NaN : 591;
				
				triggerContainer.paddingTop = widgetLibrary.visible ? 0 : 106;
				
				btnWidgetTrigger.setStyle( 'icon', widgetLibrary.visible ? widgetTriggerClose : widgetTriggerOpen ); 
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
			[Bindable]
			override public function set currentState(value:String):void
			{
				super.currentState = value;
				
				if( currentState == STATE_DEFAULT )
				{
					activeModuleID = null;
				}
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			private function healthFocusResultHandler(event:ResultEvent):void 
			{
				var alerts:ArrayCollection = event.result.alerts.alert;
				
				controller.model.patientAlerts = alertsWidget.alerts = new ArrayCollection( controller.model.patientAlerts.source.concat( alerts.source ) );
				
				controller.model.patientAlertsLoaded = true;
			}
			
			private function onWidgetHeaderClick(event:EnhancedTitleWindowEvent):void
			{
				dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, EnhancedTitleWindow(event.currentTarget).module) );
			}
			
			private function onWidgetClose(event:CloseEvent):void
			{
				var module:EnhancedTitleWindow = EnhancedTitleWindow(event.currentTarget);
				module.visible = module.includeInLayout = false;
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			private function getWidgetByID( widgetID:String ):EnhancedTitleWindow
			{
				return this[ widgetID + 'Widget' ] as EnhancedTitleWindow;
			}
			
			private function showWidget( widgetID:String ):void
			{
				var widget:EnhancedTitleWindow = getWidgetByID( widgetID );
				
				if( widget )
				{
					widget.visible = widget.includeInLayout = true;
					
					stateDirty = true;
					
					invalidateProperties();
				}
			}
			
			public function showModule( moduleID:String ):void
			{
				CursorManager.setBusyCursor();
				
				currentState = STATE_MODULE;
				
				activeModuleID = moduleID;
			}
			
			private function toggleLibrary():void
			{
				var library:DisplayObject = widgetLibrary;
				var visible:Boolean = library.visible;
				
				if( currentState == STATE_MODULE )
				{
					if( widgetLibrary.parent != content )
					{
						if( widgetLibrary.parent )
							Group(widgetLibrary.parent).removeElement( widgetLibrary );
						
						content.addElementAt( widgetLibrary, 0 );
					}
				}
				else
				{
					if( widgetLibrary.parent != triggerContainer )
					{
						if( widgetLibrary.parent )
							Group(widgetLibrary.parent).removeElement( widgetLibrary );
						
						triggerContainer.addElementAt( widgetLibrary, 1 );
					}
				}
				
				widgetLibrary.visible = widgetLibrary.includeInLayout = !visible;
				
				if( currentState == STATE_DEFAULT )
				{
					content.verticalScrollPosition = content.height + 100;
				}
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			public function get activeModuleID():String{ return _activeModuleID; }
			
			[Bindable]
			public function get patient():PatientModel{ return _patient;}
			public function get selectedAppointment():Object{ return _selectedAppointment; }

			public function set activeModuleID(value:String):void
			{
				_activeModuleID = value;
				
				if( widgetLibrary )
					widgetLibrary.visible = widgetLibrary.includeInLayout = false;
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			public function set patient(value:PatientModel):void
			{
				_patient = value;
				
				invalidateProperties();
			}
			
			public function set selectedAppointment(value:Object):void
			{
				_selectedAppointment = value;
				
				invalidateProperties();
			}
			
			private function onAlertSelect(event:ListEvent ):void
			{
				if( activeModuleID == Constants.MODULE_MEDICATIONS )
				{
					MedicationsModule( modMedications.getElementAt(0) ).showMedicationDetailsByName( event.itemRenderer.data.description );
				}
			}
			
			private function onSetState(event:ApplicationEvent):void
			{
				if( event.target is EnhancedTitleWindow )
				{
					event.stopImmediatePropagation();
				}
			}
			
			private function init():void 
			{
				stage.addEventListener( Event.RESIZE, onResize );
				
				onResize();
				
				alertsWidget.addEventListener( ListEvent.ITEM_CLICK, onAlertSelect );
				alertsWidget.dropDownDataProvider = new ArrayCollection(['     Add New Internal Note','     View...']);
				
				if( !controller.model.patientAlertsLoaded ) 
				{
					healthFocusXMLdata.send();
				}
				else
				{
					alertsWidget.alerts = controller.model.patientAlerts;
				}
				
				widgetContainer.addEventListener( ApplicationEvent.SET_STATE, onSetState );
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="module" />
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService 
			id="healthFocusXMLdata"
			url="data/healthFocus.xml"
			result="healthFocusResultHandler(event)" />
	</fx:Declarations>
	
	<s:BorderContainer height="40" width="100%">
		
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" paddingLeft="16"/>
		</s:layout>
		
		<s:backgroundFill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0xA3A3A3" alpha="1" ratio=".38" />
				<s:GradientEntry color="0x706F6F" alpha="1" ratio="1" /> <!--ratio="0.8834"-->
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Image source="@Embed('/images/patientHome.png')" buttonMode="true" click="{currentState = STATE_DEFAULT}" />
		
		<s:HGroup color="0xFFFFFF" verticalAlign="middle" paddingLeft="-7" gap="4" fontSize="22">
			
			<s:Label 
				paddingTop="2" paddingLeft="10" 
				text="{patient.fullName}"
				styleName="{currentState==STATE_MODULE ? 'blue22' : 'white22Bold'}" 
				visible="{currentState==STATE_DEFAULT}" includeInLayout="{currentState==STATE_DEFAULT}" />
			
			<mx:LinkButton 
				id="patientName"
				label="{patient.fullName}"
				color="0xAEDEE2" textRollOverColor="0xAEDEE2" textSelectedColor="0xAEDEE2" fontSize="22"
				rollOver="patientName.styleName = 'linkBtnUnderline'" 
				rollOut="patientName.styleName = 'linkBtn'" 
				click="currentState = STATE_DEFAULT"  skin="{null}"
				visible="{currentState==STATE_MODULE}" includeInLayout="{currentState==STATE_MODULE}"/>
			
			<s:HGroup visible="{currentState == STATE_MODULE}" verticalAlign="middle" gap="5">
				
				<mx:Label text="»" styleName="white2Bold" width="15" />
				
				<mx:Label id="moduleTitle" styleName="white22Bold" />
				
				<mx:LinkButton label="▼" fontSize="10" color="0xFFFFFF" paddingTop="2" paddingLeft="2" click="toggleLibrary()" skin="{null}" />
				
			</s:HGroup>
			
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:Scroller id="scroller" width="1024" horizontalScrollPolicy="off">
		
		<s:VGroup id="content">
			
			<s:HGroup id="widgetContainer" gap="22" paddingTop="11" minHeight="591">
				
				<!-- column 1	-->
				<s:VGroup gap="17">
					
					<!-- see http://blog.9mmedia.com/?p=535 -->
					<patient:PatientProfile 
						id="patientProfileWidget" />
					<!--visible="{widgetPatientProfileOpen || currentState == 'module'}" includeInLayout="{widgetPatientProfileOpen || currentState == 'module'}" -->
					
					<patient:RecentActivities
						id="recentActivitiesWidget" 
						width="305" title="Patient's Recent Activities" 
						collapsible="true" headerClickable="false" 
						titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
						includeIn="default" creationComplete="recentActivitiesWidget.module = Constants.MODULE_RECENT_ACTIVITIES" />
						
					<widgets:PatientAppointmentsWidget 
						id="appointmentsWidget" 
						width="305" title="Appointments (4)" 
						collapsible="true" headerClickable="false" 
						titleBarHeight="30"
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="appointmentsWidget.module = Constants.MODULE_APPOINTMENTS" />
					
					<widgets:PatientImmunizationsWidget
						id="immunizationsWidget" width="305" title="Immunizations (12)" 
						collapsible="true" headerClickable="false" displayWarning="true" 
						warningToolTip="Immunizations overdue" titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="immunizationsWidget.module = Constants.MODULE_IMMUNIZATIONS"/>	<!--title="{'Immunizations (' + immunizationsDueNumber + ')'}" (see comments on ArrayList below)-->
					
					<widgets:PatientMedicalRecordsWidget
						id="medicalRecordsWidget" width="305" 
						title="Medical Records" 
						collapsible="true" headerClickable="false" close="onWidgetClose(event)"
						module="medicalRecordsModule" titleBarHeight="30" color="0xFFFFFF" 
						headerClicked="onWidgetHeaderClick(event)"
						includeIn="default" creationComplete="medicalRecordsWidget.module = Constants.MODULE_MEDICAL_RECORDS"/>
					
				</s:VGroup>
				
				<!-- column 2	-->
				<s:VGroup gap="17">
					
					<patient:AlertsWidget 
						id="alertsWidget" 
						width="633" maxHeight="157" 
						collapsible="true" headerClickable="false" showCloseButton="false" displayWarning="true" 
						warningToolTip="Patient needs attention" 
						titleBarHeight="30" 
						color="0xFFFFFF" 
						showDropDown="true" />
					
					<widgets:PatientMedicationsWidget
						id="medicationsWidget" width="633" title="Medications" 
						collapsible="true" headerClickable="false" 
						module="modMedications" titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="medicationsWidget.module = Constants.MODULE_MEDICATIONS"/>
					
					<s:HGroup gap="22" includeIn="default">
						
						<s:VGroup gap="17">
							
							<patient:DecisionSupportWidget
								id="decisionSupportWidget" 
								width="305" title="Decision Support" 
								patient="{patient}" 
								collapsible="true" headerClickable="false" 
								module="decisionSupportModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="decisionSupportWidget.module = ProviderConstants.MODULE_DECISION_SUPPORT" />
							
							<widgets:PatientNutritionWidget
								id="nutritionWidget" 
								width="305" 
								title="Nutrition"
								collapsible="true" headerClickable="false" 
								module="nutritionModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="nutritionWidget.module = Constants.MODULE_NUTRITION"/>
							
							<widgets:PatientVitalSignsWidget
								id="vitalSignsWidget" 
								width="305" maxHeight="441"
								title="Vital Signs" 
								collapsible="true" headerClickable="false"
								module="vitalSignsModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="vitalSignsWidget.module = Constants.MODULE_VITAL_SIGNS"/>
							
						</s:VGroup>
						
						<widgets:PatientExerciseWidget
							id="exerciseWidget" 
							width="305" maxHeight="550" 
							title="Exercise" 
							collapsible="true" headerClickable="false"
							titleBarHeight="30"  
							headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
							creationComplete="exerciseWidget.module = Constants.MODULE_EXERCISE" />
						
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			
			<mx:ViewStack id="moduleContainer" visible="false" width="975" resizeToContent="true" creationPolicy="none" creationComplete="CursorManager.removeBusyCursor()">
				
				<s:NavigatorContent id="modAppointments">
					<modules:AppointmentsModule width="975" paddingTop="10" showHeader="false" currentState="simple" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modExercise">
					<modules:ExerciseModule width="975" paddingTop="10" showHeader="false" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modImmunizations">
					<modules:ImmunizationsModule width="975" paddingTop="10" showHeader="false" currentState="provider" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modMedicalRecords">
					<modules:MedicalRecordsModule width="975" paddingTop="10" showHeader="false" currentState="provider" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modMedications">
					<modules:MedicationsModule width="975" paddingTop="10" showHeader="false" currentState="provider" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modNutrition">
					<modules:NutritionModule width="975" paddingTop="10" showHeader="false" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modVitalSigns">
					<modules:VitalSignsModule width="975" paddingTop="10" showHeader="false" currentState="provider" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modDecisionSupport">
					<modules1:DecisionSupportModule width="975" paddingTop="10" patient="{patient}" />
				</s:NavigatorContent>
				
			</mx:ViewStack>
			
			<s:VGroup id="triggerContainer" includeIn="default" width="100%" horizontalAlign="right">
				
				<mx:LinkButton id="btnWidgetTrigger" label="Widgets" labelPlacement="left" paddingRight="34" fontSize="12" color="0xFFFFFF" textRollOverColor="0xFFFFFF" textSelectedColor="0xFFFFFF" skin="{null}" rollOver="{btnWidgetTrigger.styleName='linkBtnUnderline';}" rollOut="btnWidgetTrigger.styleName='linkBtn';" click="toggleLibrary()" />
				
				<s:BorderContainer id="widgetLibrary" width="1024" height="100" visible="false" includeInLayout="false" borderAlpha=".2" borderColor="0xF2F2F2">
					
					<s:layout>
						<s:HorizontalLayout paddingTop="5" paddingLeft="47" gap="34" />
					</s:layout>
					
					<s:backgroundFill>
						<s:LinearGradient rotation="270">
							<s:GradientEntry color="0x000000" alpha="1" ratio="0" />
							<s:GradientEntry color="0x515151" alpha="1" ratio="1" /> <!--ratio="0.8834"-->
						</s:LinearGradient>
					</s:backgroundFill>
					
					<s:HGroup id="patientProfileTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('/images/widgetLibProviderPatientProfile.png')" />
							<s:Label text="{'Patient\'s\nProfile'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_PATIENT_PROFILE )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderPatientProfile.png')" overSkin="@Embed('/images/widgetLibProviderPatientProfileOver.png')" downSkin="@Embed('/images/widgetLibProviderPatientProfileDown.png')" />
							<s:Label text="{'Patient\'s\nProfile'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="recentActivitiesTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_RECENT_ACTIVITIES ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderRecentActivities.png')" />
							<s:Label text="{'Recent\nActivities'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_RECENT_ACTIVITIES )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderRecentActivities.png')" overSkin="@Embed('/images/widgetLibProviderRecentActivitiesOver.png')" downSkin="@Embed('/images/widgetLibProviderRecentActivitiesDown.png')" />
							<s:Label text="{'Recent\nActivities'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup paddingLeft="-6" paddingRight="-6" id="appointmentsTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_APPOINTMENTS ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderAppointments.png')" />
							<s:Label text="Appointments" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_APPOINTMENTS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderAppointments.png')" overSkin="@Embed('/images/widgetLibProviderAppointmentsOver.png')" downSkin="@Embed('/images/widgetLibProviderAppointmentsDown.png')" />
							<s:Label text="Appointments" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup paddingLeft="-7" paddingRight="-7" id="immunizationsTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_IMMUNIZATIONS ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderImmunizations.png')" />
							<s:Label text="Immunizations" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_IMMUNIZATIONS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderImmunizations.png')" overSkin="@Embed('/images/widgetLibProviderImmunizationsOver.png')" downSkin="@Embed('/images/widgetLibProviderImmunizationsDown.png')" />
							<s:Label text="Immunizations" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="medicalRecordsTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_MEDICAL_RECORDS ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderMedicalRecords.png')" />
							<s:Label text="{'Medical\nRecords'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_MEDICAL_RECORDS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderMedicalRecords.png')" overSkin="@Embed('/images/widgetLibProviderMedicalRecordsOver.png')" downSkin="@Embed('/images/widgetLibProviderMedicalRecordsDown.png')" />
							<s:Label text="{'Medical\nRecords'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup paddingLeft="-3" paddingRight="-3" id="alertsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('/images/widgetLibProviderHealthFocus.png')" />
							<s:Label text="Health Focus" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_ALERTS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderHealthFocus.png')" overSkin="@Embed('/images/widgetLibProviderHealthFocusOver.png')" downSkin="@Embed('/images/widgetLibProviderHealthFocusDown.png')" />
							<s:Label text="Health Focus" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup paddingRight="-1" id="medicationsTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_MEDICATIONS ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderMedications.png')" />
							<s:Label text="Medications" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_MEDICATIONS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderMedications.png')" overSkin="@Embed('/images/widgetLibProviderMedicationsOver.png')" downSkin="@Embed('/images/widgetLibProviderMedicationsDown.png')" />
							<s:Label text="Medications" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="nutritionTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('/images/widgetLibProviderNutrition.png')" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_NUTRITION ) ) : null" buttonMode="{currentState==STATE_MODULE}"/>
							<s:Label text="Nutrition" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_NUTRITION )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderNutrition.png')" overSkin="@Embed('/images/widgetLibProviderNutritionOver.png')" downSkin="@Embed('/images/widgetLibProviderNutritionDown.png')" />
							<s:Label text="Nutrition" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="exerciseTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('/images/widgetLibProviderExercise.png')" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_EXERCISE ) ) : null" buttonMode="{currentState==STATE_MODULE}"/>
							<s:Label text="Exercise" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_EXERCISE )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderExercise.png')" overSkin="@Embed('/images/widgetLibProviderExerciseOver.png')" downSkin="@Embed('/images/widgetLibProviderExerciseDown.png')" />
							<s:Label text="Exercise" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="vitalSignsTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, Constants.MODULE_EXERCISE ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderVitalSigns.png')" />
							<s:Label text="Vital Signs" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_VITAL_SIGNS )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderVitalSigns.png')" overSkin="@Embed('/images/widgetLibProviderVitalSignsOver.png')" downSkin="@Embed('/images/widgetLibProviderVitalSignsDown.png')" />
							<s:Label text="Vital Signs" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="decisionSupportTrigger">
						<s:VGroup horizontalAlign="center" gap="4" click="currentState==STATE_MODULE ? dispatchEvent( new ApplicationEvent( ApplicationEvent.SET_STATE, true, false, ProviderConstants.MODULE_DECISION_SUPPORT ) ) : null" buttonMode="{currentState==STATE_MODULE}">
							<s:Image source="@Embed('/images/widgetLibProviderDecisionSupport.png')" />
							<s:Label text="{'Decision\nSupport'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_DECISION_SUPPORT )" buttonMode="true">
							<mx:Button upSkin="@Embed('/images/widgetLibProviderDecisionSupport.png')" overSkin="@Embed('/images/widgetLibProviderDecisionSupportOver.png')" downSkin="@Embed('/images/widgetLibProviderDecisionSupportDown.png')" />
							<s:Label text="{'Decision\nSupport'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
				</s:BorderContainer>
				
			</s:VGroup>
			
		</s:VGroup>
		
	</s:Scroller>
	
</s:NavigatorContent>
