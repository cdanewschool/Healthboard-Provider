<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*"
					xmlns:widgets="components.widgets.*"
					xmlns:radarchart="fr.kapit.radarchart.*"
					creationComplete="{init();}" xmlns:patient="components.widgets.patient.*" xmlns:modules="modules.*">
	
	<s:layout>
		<s:VerticalLayout paddingTop="15"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import ASfiles.ProviderConstants;
			
			import controllers.Controller;
			import controllers.MainController;
			
			import events.EnhancedTitleWindowEvent;
			
			import external.collapsibleTitleWindow.components.enhancedtitlewindow.EnhancedTitleWindow;
			
			import models.PatientModel;
			
			import mx.collections.ArrayCollection;
			import mx.core.INavigatorContent;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Group;
			
			import util.DateFormatters;
			
			private const WIDGET_ALERTS:String = "alerts";
			private const WIDGET_APPOINTMENTS:String = "appointments";
			private const WIDGET_DECISION_SUPPORT:String = "decisionSupport";
			private const WIDGET_EXERCISE:String = "exercise";
			private const WIDGET_IMMUNIZATIONS:String = "immunizations";
			private const WIDGET_MEDICAL_RECORDS:String = "medicalRecords";
			private const WIDGET_MEDICATIONS:String = "medications";
			private const WIDGET_NUTRITION:String = "nutrition";
			private const WIDGET_PATIENT_PROFILE:String = "patientProfile";
			private const WIDGET_RECENT_ACTIVITIES:String = "recentActivities";
			private const WIDGET_VITAL_SIGNS:String = "vitalSigns";
			
			private var WIDGET_IDS:Array = 
				[
					WIDGET_ALERTS, WIDGET_APPOINTMENTS, WIDGET_DECISION_SUPPORT, WIDGET_EXERCISE, 
					WIDGET_IMMUNIZATIONS, WIDGET_MEDICAL_RECORDS, WIDGET_MEDICATIONS, WIDGET_NUTRITION, 
					WIDGET_PATIENT_PROFILE, WIDGET_RECENT_ACTIVITIES, WIDGET_VITAL_SIGNS
				];
			
			[Bindable] private var controller:MainController = MainController( AppProperties.getInstance().controller );
			
			private function onResize(event:Event=null):void
			{
				if( !this.stage ) return;
				
				var coords:Point = new Point( x, y );
				coords = localToGlobal( coords );
				
				widgetScroller.height = this.stage.stageHeight - coords.y - widgetScroller.y - 100;
			}
			
			private var stateDirty:Boolean;
			
			[Bindable] [Embed("images/btnWidgetTriggerOpen.png")] public var widgetTriggerOpen:Class;
			[Bindable] [Embed("images/btnWidgetTriggerClose.png")] public var widgetTriggerClose:Class;
			
 			private var _activeModule:String;
			
			private var _selectedAppointment:Object;
			private var _patient:PatientModel;
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( stateDirty )
				{
					for(var i:int=0;i<WIDGET_IDS.length;i++)
					{
						var widgetID:String = WIDGET_IDS[i];
						var widget:EnhancedTitleWindow = getWidgetByID( widgetID );
						var trigger:Group = this[ widgetID + 'Trigger' ] as Group;
						
						if( !widget || !trigger ) throw new Error('Widget or associated trigger does not exist');
						
						widget.showCloseButton = widgetID != WIDGET_ALERTS ? widgetLibrary.visible : false;
						
						var visible:Boolean = widget.visible;
						
						trigger.getChildAt(0).visible = UIComponent(trigger.getChildAt(0)).includeInLayout = visible;
						trigger.getChildAt(1).visible = UIComponent(trigger.getChildAt(1)).includeInLayout = !visible;
					}
					
					stateDirty = false;
				}
				
				if( currentState == "module" )
				{
					var module:INavigatorContent;
					
					if( (module = moduleViews.getChildByName( activeModule ) as INavigatorContent ) != null )
					{
						moduleViews.selectedChild = module;
						module.visible = true;
					}
					else
					{
						moduleViews.visible = false;
					}
				}
				
				label = lblBreadcrumbPatient.text = btnBreadcrumbPatient.label = patient.fullName;
				
				alertsWidget.activeModule = activeModule;
				
				EnhancedTitleWindow(nutritionWidget).subtitle = DateFormatters.dateFormatterDay.format( new Date() );
				
				patientProfileWidget.patient = patient;
				patientProfileWidget.minHeight = activeModule?156:NaN;
				patientProfileWidget.showDetails = activeModule == null;
				
				widgetContainer.minHeight = activeModule ? NaN : 591;
				
				triggerContainer.paddingTop = widgetLibrary.visible ? 0 : 106;
				
				if( activeModule ) widgetLibrary.visible = false;
				
				btnWidgetTrigger.setStyle( 'icon', widgetLibrary.visible ? widgetTriggerClose : widgetTriggerOpen ); 
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
			override public function set currentState(value:String):void
			{
				super.currentState = value;
				
				if( currentState == "default" )
				{
					activeModule = null;
				}
			}
			
			private function healthFocusResultHandler(event:ResultEvent):void 
			{
				controller.model.patientAlerts = alertsWidget.alerts = event.result.alerts.alert;
				
				controller.model.patientAlertsLoaded = true;
			}
			
			private function onWidgetHeaderClick(event:EnhancedTitleWindowEvent):void
			{
				currentState = "module";
				
				activeModule = EnhancedTitleWindow(event.currentTarget).module;
			}
			
			private function onWidgetClose(event:CloseEvent):void
			{
				var module:EnhancedTitleWindow = EnhancedTitleWindow(event.currentTarget);
				module.visible = module.includeInLayout = false;
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			private function getWidgetByID( widgetID:String ):EnhancedTitleWindow
			{
				return this[ widgetID + 'Widget' ] as EnhancedTitleWindow;
			}
			
			private function showWidget( widgetID:String ):void
			{
				var widget:EnhancedTitleWindow = getWidgetByID( widgetID );
				
				if( widget )
				{
					widget.visible = widget.includeInLayout = true;
					
					stateDirty = true;
					
					invalidateProperties();
				}
			}

			private function toggleLibrary():void
			{
				widgetLibrary.visible = widgetLibrary.includeInLayout = !widgetLibrary.visible;
				
				widgetContent.verticalScrollPosition = widgetContent.height + 100;
				
				stateDirty = true;
				
				invalidateProperties();
			}
			
			public function get activeModule():String{ return _activeModule; }
			public function get patient():PatientModel{ return _patient;}
			public function get selectedAppointment():Object{ return _selectedAppointment; }

			public function set activeModule(value:String):void
			{
				_activeModule = value;
				
				invalidateProperties();
				invalidateDisplayList();
			}
			
			public function set patient(value:PatientModel):void
			{
				_patient = value;
				
				invalidateProperties();
			}
			
			public function set selectedAppointment(value:Object):void
			{
				_selectedAppointment = value;
				
				invalidateProperties();
			}
			
			private function init():void 
			{
				stage.addEventListener( Event.RESIZE, onResize );
				
				onResize();
				
				alertsWidget.dropDownDataProvider = new ArrayCollection(['     Add New Internal Note','     View...']);
				
				if( !controller.model.patientAlertsLoaded ) 
				{
					healthFocusXMLdata.send();
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="module" />
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService 
			id="healthFocusXMLdata"
			url="data/healthFocus.xml"
			result="healthFocusResultHandler(event)" />
	</fx:Declarations>
	
	<s:BorderContainer height="40" width="100%">
		
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" paddingLeft="16"/>
		</s:layout>
		
		<s:backgroundFill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry color="0xA3A3A3" alpha="1" ratio=".38" />
				<s:GradientEntry color="0x706F6F" alpha="1" ratio="1" /> <!--ratio="0.8834"-->
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Image source="images/patientHome.png" buttonMode="true" click="{currentState = 'default'}" />
		
		<s:HGroup color="0xFFFFFF" verticalAlign="middle" paddingLeft="-7" gap="-4" fontSize="22">
			
			<s:Label id="lblBreadcrumbPatient" fontWeight="bold" paddingTop="2" paddingLeft="10" />
			
			<mx:LinkButton 
				id="btnBreadcrumbPatient" visible="false" includeInLayout="false"
				textRollOverColor="0xFFFFFF" textSelectedColor="0xFFFFFF" skin="{null}"
			 	rollOver="btnBreadcrumbPatient.styleName='linkBtnUnderline';" 
				rollOut="btnBreadcrumbPatient.styleName='linkBtn';" />
			
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:Scroller id="widgetScroller" width="1024" horizontalScrollPolicy="off">
		
		<s:VGroup id="widgetContent">
			
			<s:HGroup id="widgetContainer" gap="22" paddingTop="11" paddingLeft="32" minHeight="591">
				
				<!-- column 1	-->
				<s:VGroup gap="17">
					
					<!-- see http://blog.9mmedia.com/?p=535 -->
					<patient:PatientProfile 
						id="patientProfileWidget" />
					<!--visible="{widgetPatientProfileOpen || currentState == 'module'}" includeInLayout="{widgetPatientProfileOpen || currentState == 'module'}" -->
					
					<patient:RecentActivities
						id="recentActivitiesWidget" 
						width="305" title="Patient's Recent Activities" 
						collapsible="true" headerClickable="false" 
						titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
						includeIn="default" creationComplete="recentActivitiesWidget.module = ProviderConstants.MODULE_RECENT_ACTIVITIES" />
						
					<patient:PatientAppointmentsWidget 
						id="appointmentsWidget" 
						width="305" title="Appointments (4)" 
						collapsible="true" headerClickable="false" 
						titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="appointmentsWidget.module = ProviderConstants.MODULE_APPOINTMENTS" />
					
					<patient:ImmunizationsWidget
						id="immunizationsWidget" width="305" title="Immunizations (12)" 
						collapsible="true" headerClickable="false" displayWarning="true" 
						warningToolTip="Immunizations overdue" titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="immunizationsWidget.module = ProviderConstants.MODULE_IMMUNIZATIONS"/>	<!--title="{'Immunizations (' + immunizationsDueNumber + ')'}" (see comments on ArrayList below)-->
					
					<patient:MedicalRecordsWidget
						id="medicalRecordsWidget" width="305" 
						title="Medical Records" 
						collapsible="true" headerClickable="false" close="onWidgetClose(event)"
						module="medicalRecordsModule" titleBarHeight="30" color="0xFFFFFF" 
						headerClicked="onWidgetHeaderClick(event)"
						includeIn="default" creationComplete="medicalRecordsWidget.module = ProviderConstants.MODULE_MEDICAL_RECORDS"/>
					
				</s:VGroup>
				
				<!-- column 2	-->
				<s:VGroup gap="17">
					
					<patient:AlertsWidget 
						id="alertsWidget" 
						width="633" maxHeight="157" 
						collapsible="true" headerClickable="false" showCloseButton="false" displayWarning="true" 
						warningToolTip="Patient needs attention" 
						titleBarHeight="30" 
						color="0xFFFFFF" 
						showDropDown="true" />
					
					<patient:MedicationsWidget
						id="medicationsWidget" width="633" title="Medications" 
						collapsible="true" headerClickable="false" 
						module="modMedications" titleBarHeight="30" 
						headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)"
						includeIn="default" creationComplete="medicalRecordsWidget.module = ProviderConstants.MODULE_MEDICAL_RECORDS"/>
					
					<s:HGroup gap="22" includeIn="default">
						
						<s:VGroup gap="17">
							
							<patient:DecisionSupportWidget
								id="decisionSupportWidget" 
								width="305" title="Decision Support" 
								collapsible="true" headerClickable="false" 
								module="decisionSupportModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="decisionSupportWidget.module = ProviderConstants.MODULE_DECISION_SUPPORT"/>
							
							<patient:NutritionWidget
								id="nutritionWidget" 
								width="305" 
								title="Nutrition"
								collapsible="true" headerClickable="false" 
								module="nutritionModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="nutritionWidget.module = ProviderConstants.MODULE_NUTRITION"/>
							
							<patient:VitalSignsWidget
								id="vitalSignsWidget" width="305" maxHeight="441"
								title="Vital Signs" 
								collapsible="true" headerClickable="false"
								module="vitalSignsModule" titleBarHeight="30" 
								headerClicked="onWidgetHeaderClick(event)" close="onWidgetClose(event)" 
								creationComplete="vitalSignsWidget.module = ProviderConstants.MODULE_VITAL_SIGNS"/>
							
						</s:VGroup>
						
						<!--
						<patient:ExerciseWidget
							id="widgetExercise" 
							width="305" maxHeight="500" 
							title="Exercise" 
							collapsible="true" headerClickable="false" showCloseButton="{widgetLibraryOpen}" 
							module="modExercise" 
							titleBarHeight="30"  
							headerClicked="onWidgetHeaderClick(event)"
							visible="{widgetExerciseOpen}" includeInLayout="{widgetExerciseOpen}" />--><!--initialize="{parentApplication.filterProvidersForWidget();}"-->
						
						<enhancedtitlewindow:EnhancedTitleWindow 
							id="exerciseWidget" width="305" title="Exercise" collapsible="true" headerClickable="false" module="modExercise" titleBarHeight="30" initialize="{parentApplication.filterProvidersForWidget();}">
							
							<enhancedtitlewindow:layout>
								<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="6"/>
							</enhancedtitlewindow:layout>
							
							<mx:DataGrid 
								id="dgExerciseWidget" width="100%" height="{500 - parentApplication.collapsedExercisesPixels}" dataProvider="{parentApplication.arrExerciseForWidget}" selectable="false"
								color="0xFFFFFF" verticalAlign="middle" 
							 	useRollOver="false"
								headerHeight="0"
								verticalScrollPolicy="off"
								borderVisible="false" verticalGridLines="false" horizontalGridLines="false" horizontalSeparatorSkin="{null}" alternatingItemColors="[0x3C3C3B,0x3C3C3B]"
								variableRowHeight="true">
								
								<mx:columns>
									<mx:DataGridColumn dataField="exercise">
										<mx:itemRenderer>
											<fx:Component>
												<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off">
													<fx:Script>
														<![CDATA[
															import ASclasses.MyCircleItemRenderer;
															import ASclasses.MyCircleItemRendererOver;
															import ASclasses.MyCustomDataTip;
															
															import mx.charts.HitData;
															import mx.charts.events.ChartItemEvent;
															import mx.controls.Alert;
															import mx.events.FlexEvent;
															override public function set data(value:Object):void {
																super.data = value;
																innerDataGrid.dataProvider = value.chart;
															}
														]]>
													</fx:Script>
													
													<fx:Declarations>
														<fx:Array id="bge">
														</fx:Array>
													</fx:Declarations>
													
													<mx:states>
														<s:State name="expanded" />
														<s:State name="collapsed" />
													</mx:states>
													
													<s:HGroup width="140" gap="-2">
														<mx:LinkButton icon.expanded="@Embed(source='images/smallArrowGray.png')" icon.collapsed="@Embed(source='images/smallArrowCollapsedGray.png')" horizontalGap="10" id="btnVital" label="{data.exerciseType}" fontSize="12" fontWeight="bold" toggle="true" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" click="{if(this.currentState=='expanded') {this.currentState = 'collapsed'; parentApplication.collapsedExercisesPixels+= (data.exerciseType == 'Most Recent PRT') ? 210 : (data.exerciseType == 'Physician-assigned' ? 130 : 71);} else {this.currentState = 'expanded'; parentApplication.collapsedExercisesPixels-= (data.exerciseType == 'Most Recent PRT') ? 210 : (data.exerciseType == 'Physician-assigned' ? 130 : 71);}}" />
														<mx:Label text="{'(Last: ' + parentApplication.getDate(data.lastDate) + ')'}" fontSize="12" color="0x868686" paddingTop="1" />
													</s:HGroup>
													
													<s:Group includeIn="expanded"><!--includeInLayout="{this.currentState == 'expanded'}" visible="{this.currentState == 'expanded'}"-->
														<s:Line xFrom="0" xTo="280">
															<s:stroke>
																<s:SolidColorStroke color="0xB3B3B3" weight="1" alpha="0.1" />
															</s:stroke>
														</s:Line>
													</s:Group>
													
													<s:HGroup includeInLayout="{this.currentState == 'expanded' &amp;&amp; data.exerciseType == 'Most Recent PRT'}" visible="{this.currentState == 'expanded' &amp;&amp; data.exerciseType == 'Most Recent PRT'}" width="100%" horizontalAlign="center" paddingBottom="-4">
														<radarchart:RadarChart seriesField="series" 
																			   dataProvider="{parentApplication.exerciseData.getItemAt(parentApplication.exerciseData.length - 1)}" 
																			   width="200" 
																			   height="200" divisions="3" gridAlpha="0.2" axisWidth="1" gridWidth="1" axisNameTextFormat="{new TextFormat('myMyriad',11,'0x868686')}" graduationTextFormat="{new TextFormat('myMyriad',11,'0x868686')}"
																			   showGraduations="false"
																			   showAxesArrow="false">
															<radarchart:series>
																<radarchart:RadarChartSeries id="asdf1" name="PRTresults" label="PRTresults" color="0xFBB03B" />
															</radarchart:series> 
															<radarchart:axes>
																<radarchart:RadarChartAxis id="radarAxis1" name="PRTscore" label="Avg. PRT Score" />
																<radarchart:RadarChartAxis id="radarAxis2" name="mileRun" label="1.5 Mile Run"/>
																<radarchart:RadarChartAxis id="radarAxis3" name="curlUps" label="Curl Ups"/>
																<radarchart:RadarChartAxis id="radarAxis4" name="pushUps" label="Push Ups"/>
																<radarchart:RadarChartAxis id="radarAxis5" name="weight" label="Weight"/>
															</radarchart:axes>
														</radarchart:RadarChart>
													</s:HGroup>
													
													<mx:DataGrid id="innerDataGrid" includeInLayout="{this.currentState == 'expanded' &amp;&amp; data.exerciseType != 'Most Recent PRT'}" visible="{this.currentState == 'expanded' &amp;&amp; data.exerciseType != 'Most Recent PRT'}" dropIndicatorSkin="skins.general.myDropIndicatorSkin"
																 width="100%" height="{data.exerciseType == 'Physician-assigned' ? 117 : 58}" color="0xFFFFFF" verticalAlign="middle" selectable="false"
																 useRollOver="false" 
																 headerHeight="0"
																 borderVisible="false" verticalGridLines="false" horizontalGridLines="false" horizontalSeparatorSkin="{null}" alternatingItemColors="[0x3C3C3B,0x3C3C3B]"
																 variableRowHeight="true" initialize="parentApplication.updateExercisePAIndices()"><!--rowCount="7"-->
														<mx:columns>
															<mx:DataGridColumn dataField="measure">
																<mx:itemRenderer>
																	<fx:Component>
																		<mx:HBox verticalAlign="middle" paddingLeft="10" horizontalScrollPolicy="off" verticalScrollPolicy="off">
																			<fx:Script>
																				<![CDATA[
																					import ASclasses.MyCircleItemRenderer;
																					import ASclasses.MyCircleItemRendererOver;
																					import ASclasses.MyCustomDataTip;
																					
																					import mx.charts.HitData;
																					import mx.charts.events.ChartItemEvent;
																					import mx.controls.Alert;
																					import mx.events.FlexEvent;
																					import mx.managers.PopUpManager;
																					
																					override public function set data(value:Object):void {
																						super.data = value;
																						if (value.hasOwnProperty("chart")) {
																							chart.dataProvider = value.chart[0].data;
																						}
																					}	
																					
																					private function chartRolloverEventHandler(event:ChartItemEvent):void {
																						lblMinutes.text = data.chart[0].data[event.hitData.chartItem.index].value;
																						lblMiles.text = data.chart[0].data[event.hitData.chartItem.index].miles;
																						myLineSeries.setStyle("itemRenderer",new ClassFactory(ASclasses.MyCircleItemRendererOverWidget)); 
																					}
																					private function chartRolloutEventHandler(event:ChartItemEvent):void {
																						lblMinutes.text = data.chart[0].data[data.chart[0].data.length - 1].value;
																						lblMiles.text = data.chart[0].data[data.chart[0].data.length - 1].miles;
																						myLineSeries.setStyle("itemRenderer",new ClassFactory(ASclasses.MyCircleItemRendererExercise)); 
																					}
																				]]>
																			</fx:Script>
																			
																			<fx:Declarations>
																				<fx:Array id="bge">
																				</fx:Array>
																			</fx:Declarations>
																			
																			<s:VGroup width="23" horizontalAlign="center">
																				<s:Image visible="{data.measure == 'Run / Walk'}" includeInLayout="{data.measure == 'Run / Walk'}" source="@Embed('images/exRunWidget.png')" />
																				<s:Image visible="{data.measure == 'Bike'}" includeInLayout="{data.measure == 'Bike'}" source="@Embed('images/exBikeWidget.png')" />
																			</s:VGroup>
																			
																			<mx:LineChart id="chart" width="150" height="52" backgroundElements="{bge}" seriesFilters="[]" selectionMode="single" itemRollOver="chartRolloverEventHandler(event)" itemRollOut="chartRolloutEventHandler(event)"><!--itemRollOverColor="0xFBB03B" itemSelectionColor="0xFBB03B" showDataTips="true" itemRollOut="{myLineSeries.selectedIndex = 2}" -->
																				<mx:series>
																					<mx:LineSeries yField="expectation" xField="date" interactive="false">
																						<mx:lineStroke>
																							<s:SolidColorStroke color="0xFAFDFF" weight="2" alpha="0.4" />
																						</mx:lineStroke>
																					</mx:LineSeries>
																					<mx:LineSeries id="myLineSeries" yField="value" xField="date" itemRenderer="ASclasses.MyCircleItemRendererExercise" radius="4" adjustedRadius="4" fill="{parentApplication.colorVitalSignsWidgetBlack}" selectedIndex="0"><!--form="curve" -->
																						<mx:lineStroke>
																							<s:SolidColorStroke color="0xFFFFFF" weight="2" />
																						</mx:lineStroke>
																						<mx:stroke>
																							<mx:SolidColorStroke color="0xFFFFFF" weight="1"/>
																						</mx:stroke>
																					</mx:LineSeries>
																				</mx:series>
																				<mx:horizontalAxis>
																					<mx:DateTimeAxis id="exerciseXaxis" minimum="{parentApplication.chartMinExPA}" maximum="{parentApplication.chartMaxExPA}" />
																				</mx:horizontalAxis>
																				<mx:horizontalAxisRenderers>
																					<mx:AxisRenderer axis="{exerciseXaxis}" showLabels="false" tickPlacement="none" showLine="false" visible="false"  />
																				</mx:horizontalAxisRenderers>
																				<mx:verticalAxis>
																					<mx:LinearAxis id="exerciseYaxis" minimum="{data.chartMin}" maximum="{data.chartMax}" /><!--minimum="60" maximum="140"-->
																				</mx:verticalAxis>
																				<mx:verticalAxisRenderers>
																					<mx:AxisRenderer axis="{exerciseYaxis}" showLabels="false" tickPlacement="none" showLine="false" visible="false" />
																				</mx:verticalAxisRenderers>
																			</mx:LineChart>
																			
																			<s:VGroup fontSize="12" paddingLeft="10" gap="3">
																				<s:HGroup gap="3">
																					<s:Label id="lblMinutes" color="0xFBB03B" fontWeight="bold" text="{data.chart[0].data[data.chart[0].data.length - 1].value}" />
																					<s:Label text="minutes" color="0xFFFFFF" />
																				</s:HGroup>
																				<s:HGroup visible="{data.measure == 'Run / Walk'}" includeInLayout="{data.measure == 'Run / Walk'}" gap="3">
																					<s:Label id="lblMiles" color="0xFBB03B" fontWeight="bold" text="{data.chart[0].data[data.chart[0].data.length - 1].miles}" />
																					<s:Label text="miles" color="0xFFFFFF" />
																				</s:HGroup>
																			</s:VGroup>
																		</mx:HBox>
																		
																	</fx:Component>
																</mx:itemRenderer>
															</mx:DataGridColumn>
														</mx:columns>
													</mx:DataGrid>
													
													<s:Group>
														<s:Line xFrom="0" xTo="280">
															<s:stroke>
																<s:SolidColorStroke color="0xB3B3B3" weight="1" alpha="0.1" />
															</s:stroke>
														</s:Line>
													</s:Group>
												</mx:VBox>
												
											</fx:Component>
										</mx:itemRenderer>
									</mx:DataGridColumn>
								</mx:columns>
								
							</mx:DataGrid>
						</enhancedtitlewindow:EnhancedTitleWindow>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			
			<mx:ViewStack id="moduleViews" includeIn="module" paddingLeft="32" width="1024">
				
				<s:NavigatorContent name="appointmentsModule">
					<s:Label text="test" />
				</s:NavigatorContent>
				
				<s:NavigatorContent id="modMedicalRecords">
					<modules:MedicalRecordsModule width="976" paddingTop="10" showHeader="false" />
				</s:NavigatorContent>
				
			</mx:ViewStack>
			
			<s:VGroup id="triggerContainer" includeIn="default" width="100%" horizontalAlign="right">
				
				<mx:LinkButton id="btnWidgetTrigger" label="Widgets" labelPlacement="left" paddingRight="34" fontSize="12" color="0xFFFFFF" textRollOverColor="0xFFFFFF" textSelectedColor="0xFFFFFF" skin="{null}" rollOver="{btnWidgetTrigger.styleName='linkBtnUnderline';}" rollOut="btnWidgetTrigger.styleName='linkBtn';" click="toggleLibrary()" />
				
				<s:BorderContainer id="widgetLibrary" width="1024" height="100" visible="false" includeInLayout="false" borderAlpha=".2" borderColor="0xF2F2F2">
					
					<s:layout>
						<s:HorizontalLayout paddingTop="5" paddingLeft="47" gap="34" />
					</s:layout>
					
					<s:backgroundFill>
						<s:LinearGradient rotation="270">
							<s:GradientEntry color="0x000000" alpha="1" ratio="0" />
							<s:GradientEntry color="0x515151" alpha="1" ratio="1" /> <!--ratio="0.8834"-->
						</s:LinearGradient>
					</s:backgroundFill>
					
					<!--<s:HGroup>
						<s:VGroup visible="{widgetMessagesOpen}" includeInLayout="{widgetMessagesOpen}" horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderMessages.png')" />
							<s:Label text="Messages" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup visible="{!widgetMessagesOpen}" includeInLayout="{!widgetMessagesOpen}" horizontalAlign="center" gap="4" click="{widgetMessagesOpen = true}" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderMessages.png')" overSkin="@Embed('images/widgetLibProviderMessagesOver.png')" downSkin="@Embed('images/widgetLibProviderMessagesDown.png')" />
							<s:Label text="Messages" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>-->
					
					<s:HGroup id="patientProfileTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderPatientProfile.png')" />
							<s:Label text="{'Patient\'s\nProfile'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_PATIENT_PROFILE )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderPatientProfile.png')" overSkin="@Embed('images/widgetLibProviderPatientProfileOver.png')" downSkin="@Embed('images/widgetLibProviderPatientProfileDown.png')" />
							<s:Label text="{'Patient\'s\nProfile'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup id="recentActivitiesTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderRecentActivities.png')" />
							<s:Label text="{'Recent\nActivities'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_RECENT_ACTIVITIES )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderRecentActivities.png')" overSkin="@Embed('images/widgetLibProviderRecentActivitiesOver.png')" downSkin="@Embed('images/widgetLibProviderRecentActivitiesDown.png')" />
							<s:Label text="{'Recent\nActivities'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					
					<s:HGroup paddingLeft="-6" paddingRight="-6" id="appointmentsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderAppointments.png')" />
							<s:Label text="Appointments" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_APPOINTMENTS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderAppointments.png')" overSkin="@Embed('images/widgetLibProviderAppointmentsOver.png')" downSkin="@Embed('images/widgetLibProviderAppointmentsDown.png')" />
							<s:Label text="Appointments" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup paddingLeft="-7" paddingRight="-7" id="immunizationsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderImmunizations.png')" />
							<s:Label text="Immunizations" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_IMMUNIZATIONS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderImmunizations.png')" overSkin="@Embed('images/widgetLibProviderImmunizationsOver.png')" downSkin="@Embed('images/widgetLibProviderImmunizationsDown.png')" />
							<s:Label text="Immunizations" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup id="medicalRecordsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderMedicalRecords.png')" />
							<s:Label text="{'Medical\nRecords'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_MEDICAL_RECORDS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderMedicalRecords.png')" overSkin="@Embed('images/widgetLibProviderMedicalRecordsOver.png')" downSkin="@Embed('images/widgetLibProviderMedicalRecordsDown.png')" />
							<s:Label text="{'Medical\nRecords'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup paddingLeft="-3" paddingRight="-3" id="alertsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderHealthFocus.png')" />
							<s:Label text="Health Focus" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_ALERTS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderHealthFocus.png')" overSkin="@Embed('images/widgetLibProviderHealthFocusOver.png')" downSkin="@Embed('images/widgetLibProviderHealthFocusDown.png')" />
							<s:Label text="Health Focus" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup paddingRight="-1" id="medicationsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderMedications.png')" />
							<s:Label text="Medications" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_MEDICATIONS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderMedications.png')" overSkin="@Embed('images/widgetLibProviderMedicationsOver.png')" downSkin="@Embed('images/widgetLibProviderMedicationsDown.png')" />
							<s:Label text="Medications" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup id="nutritionTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderNutrition.png')" />
							<s:Label text="Nutrition" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_NUTRITION )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderNutrition.png')" overSkin="@Embed('images/widgetLibProviderNutritionOver.png')" downSkin="@Embed('images/widgetLibProviderNutritionDown.png')" />
							<s:Label text="Nutrition" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup id="exerciseTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderExercise.png')" />
							<s:Label text="Exercise" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_EXERCISE )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderExercise.png')" overSkin="@Embed('images/widgetLibProviderExerciseOver.png')" downSkin="@Embed('images/widgetLibProviderExerciseDown.png')" />
							<s:Label text="Exercise" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup id="vitalSignsTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderVitalSigns.png')" />
							<s:Label text="Vital Signs" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_VITAL_SIGNS )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderVitalSigns.png')" overSkin="@Embed('images/widgetLibProviderVitalSignsOver.png')" downSkin="@Embed('images/widgetLibProviderVitalSignsDown.png')" />
							<s:Label text="Vital Signs" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>
					<!--<s:HGroup>
						<s:VGroup visible="{widgetEducationalResourcesOpen}" includeInLayout="{widgetEducationalResourcesOpen}" horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderEducationalResources.png')" />
							<s:Label text="{'Educational\nResources'}" textAlign="center" lineHeight="11" fontSize="11" color="0xFFFFFF" />
						</s:VGroup>
						<s:VGroup visible="{!widgetEducationalResourcesOpen}" includeInLayout="{!widgetEducationalResourcesOpen}" horizontalAlign="center" gap="4" click="{widgetEducationalResourcesOpen = true}" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderEducationalResources.png')" overSkin="@Embed('images/widgetLibProviderEducationalResourcesOver.png')" downSkin="@Embed('images/widgetLibProviderEducationalResourcesDown.png')" />
							<s:Label text="{'Educational\nResources'}" textAlign="center" lineHeight="11" fontSize="11" color="0x666666" fontStyle="italic" />
						</s:VGroup>
					</s:HGroup>-->
					<s:HGroup id="decisionSupportTrigger">
						<s:VGroup horizontalAlign="center" gap="4">
							<s:Image source="@Embed('images/widgetLibProviderDecisionSupport.png')" />
							<s:Label text="{'Decision\nSupport'}" fontSize="11" color="0xFFFFFF" textAlign="center" />
						</s:VGroup>
						<s:VGroup horizontalAlign="center" gap="4" click="showWidget( WIDGET_DECISION_SUPPORT )" buttonMode="true">
							<mx:Button upSkin="@Embed('images/widgetLibProviderDecisionSupport.png')" overSkin="@Embed('images/widgetLibProviderDecisionSupportOver.png')" downSkin="@Embed('images/widgetLibProviderDecisionSupportDown.png')" />
							<s:Label text="{'Decision\nSupport'}" fontSize="11" color="0x666666" fontStyle="italic" textAlign="center" />
						</s:VGroup>
					</s:HGroup>
				</s:BorderContainer>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:NavigatorContent>