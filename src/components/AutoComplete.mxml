<?xml version="1.0" encoding="utf-8"?>
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		width="100%" maxHeight="100" color="{textColor}" fontSize="12" contentBackgroundColor="{backgroundColor}" 
		alternatingItemColors="{[backgroundColor,backgroundColor]}" rollOverColor="{rolloverColor}" selectionColor="{rolloverColor}" 
		addedToStage="onShow()" removedFromStage="onHide()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import events.AutoCompleteEvent;
			
			import mx.managers.IFocusManagerComponent;
			
			import spark.components.TextInput;
			
			[Bindable]
			public function get backgroundColor():uint
			{
				return _backgroundColor;
			}

			public function set backgroundColor(value:uint):void
			{
				_backgroundColor = value;
				textColor = (_backgroundColor == 0xFFFFFF) ? 0x000000 : 0xFFFFFF;
				rolloverColor = (_backgroundColor == 0xFFFFFF) ? 0xCCCCCCC : 0x31535E;
			}

			public var callbackFunction:Function;
			
			public var targetField:TextInput;
			
 			private var _backgroundColor:uint = 0x3C3C3B;
			[Bindable] public var rolloverColor:uint = 0x31535E;
			[Bindable] public var textColor:uint = 0xFFFFFF;
			
			private function onFocusOut( event:FocusEvent ):void
			{
				dispatchEvent( new AutoCompleteEvent( AutoCompleteEvent.HIDE ) );
			}
			
			private function onKeyDown(event:KeyboardEvent):void
			{
				if( event.keyCode == Keyboard.ESCAPE )
				{
					dispatchEvent( new AutoCompleteEvent( AutoCompleteEvent.HIDE ) );
				}
			}
			
			private function onMouseDown(event:MouseEvent):void
			{
				if( !hitTestPoint(stage.mouseX, stage.mouseY) )
				{
					dispatchEvent( new AutoCompleteEvent( AutoCompleteEvent.HIDE ) );
				}
			}
			
			private function onHide():void
			{
				targetField.removeEventListener( FocusEvent.FOCUS_OUT, onFocusOut );
				
				stage.removeEventListener( KeyboardEvent.KEY_DOWN, onKeyDown );
				stage.removeEventListener( MouseEvent.MOUSE_DOWN, onMouseDown );
			}
			
			private function onShow():void
			{
				var coords:Point = new Point( targetField.x, targetField.y );
				coords = targetField.parent.localToGlobal( coords );
				x = coords.x;
				y = coords.y + targetField.height;
				
				callLater( targetField.addEventListener, [FocusEvent.FOCUS_OUT, onFocusOut] );
				callLater( stage.addEventListener, [KeyboardEvent.KEY_DOWN, onKeyDown] );
				callLater( stage.addEventListener, [MouseEvent.MOUSE_DOWN, onMouseDown] );
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout useVirtualLayout="true" requestedMinRowCount="1" gap="0" />
	</s:layout>
	
</s:List>
