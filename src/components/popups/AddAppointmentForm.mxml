<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	creationComplete="init()">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="appointmentTypes" itemClick="selectAppointmentType(event)" selectedValue="{appointment.type}" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import controllers.MainController;
			
			import events.AutoCompleteEvent;
			import events.TeamAppointmentEvent;
			
			import models.Appointment;
			import models.ProviderApplicationModel;
			import models.UserModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.LinkButton;
			import mx.events.ItemClickEvent;
			
			import spark.components.List;
			import spark.components.RadioButton;
			import spark.events.IndexChangeEvent;
			
			import util.StringUtil;
			
			[Bindable] public var user:UserModel;
			 private var _appointment:Appointment;
			
			private var patients:ArrayCollection;
			
			private const REASON_PLACEHOLDER:String = "Enter a reason for visit";	//"Enter or select reason for visit";
			
			[Bindable] private var sendMessageToPatient:Boolean = true;
			[Bindable] private var reminderTimeUnitOptions:ArrayCollection = new ArrayCollection
				(
					[
						{label:'minute(s) before',data:'minutes'},
						{label:'hours(s) before',data:'hours'},
						{label:'day(s) before',data:'days'}
					]
				);
			
			[Bindable]
			public function get appointment():Appointment
			{
				return _appointment;
			}

			public function set appointment(value:Appointment):void
			{
				_appointment = value;
				
				invalidateProperties();
			}

			private function getDisplayName(item:UserModel):String
			{
				return item.firstName + ' ' + item.lastName;
			}
			
			private function onReasonClick(event:MouseEvent):void
			{
				var link:LinkButton = LinkButton(event.currentTarget);
				
				appointment.reason = reason.text = link.label;
			}
			
			private function selectAppointmentType(event:ItemClickEvent):void
			{
				appointment.type = RadioButtonGroup(event.currentTarget).selectedValue.toString();
			}
			
			private function filter():void
			{
				patients.refresh();
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( appointment )
				{
					reason.text = appointment.reason != '' ? appointment.reason : REASON_PLACEHOLDER;
					
					fromDate.selectedDate = appointment.from;
					fromHours.text = StringUtil.leftPad( appointment.from.hours.toString() );
					fromMinutes.text = StringUtil.leftPad( appointment.from.minutes.toString() );
					
					toDate.selectedDate = appointment.to;
					toHours.text = StringUtil.leftPad( appointment.to.hours.toString() );
					toMinutes.text = StringUtil.leftPad( appointment.to.minutes.toString() );
					
					//	"-1" because we don't need to include the "pending" type
					//	TODO: check for the pending type, vs assuming it is at the end of the array
					for(var i:int=0,r:int=0;i<Appointment.APPOINTMENT_TYPES.length-1;i++)
					{
						var def:Object = Appointment.APPOINTMENT_TYPES[i];
						
						var radio:RadioButton = new RadioButton();
						radio.groupName = "appointmentTypes"
						radio.value = def.value;
						radio.label = def.label;
						typeList.addElement( radio );
					}
					
					if( appointment.recurUnit )
					{
						for(i=0;i<Appointment.RECUR_TYPES.length;i++)
						{
							if( appointment.recurUnit == Appointment.RECUR_TYPES[i].value )
							{
								recurUnit.selectedIndex = i;
								
								break;
							}
						}
					}
				}
			}
			
			private function handleFromChange():void 
			{
				appointment.from = fromDate.selectedDate;

				if(appointment.to < appointment.from) 
				{
					appointment.to = appointment.from;
					toDate.text = fromDate.text;
				}
			}
			
			private function init():void
			{
			}
		]]>
	</fx:Script>
	
	<s:HGroup>
		<mx:FormItem label="From:" labelWidth="67" labelStyleName="darkGrayBold12">
			<mx:DateField id="fromDate" change="handleFromChange()" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark"/>
		</mx:FormItem>
		<mx:FormItem label="To:" labelWidth="22" labelStyleName="darkGrayBold12">
			<mx:DateField id="toDate" change="{appointment.to = toDate.selectedDate}" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark"/>
		</mx:FormItem>
	</s:HGroup>
	
	<s:HGroup>
		<mx:FormItem label="Time:" labelWidth="67" labelStyleName="darkGrayBold12">
			<s:HGroup verticalAlign="middle">
				<s:TextInput id="fromHours" width="25" height="24" restrict="0-9" change="{appointment.from.hours = parseInt(fromHours.text);}" focusOut="{fromHours.text = StringUtil.leftPad(fromHours.text)}" />
				<s:TextInput id="fromMinutes" width="25" height="24" restrict="0-9" change="{appointment.from.minutes = parseInt(fromMinutes.text)}" focusOut="{fromMinutes.text = StringUtil.leftPad(fromMinutes.text)}"/>
				<s:Label text="hr"/>
			</s:HGroup>
		</mx:FormItem>
		<mx:FormItem label="" labelWidth="49">
			<s:HGroup verticalAlign="middle">
				<s:TextInput id="toHours" width="25" height="24" restrict="0-9" change="{appointment.to.hours = parseInt(toHours.text)}" focusOut="{toHours.text = StringUtil.leftPad(toHours.text)}"/>
				<s:TextInput id="toMinutes" width="25" height="24" restrict="0-9" change="{appointment.to.minutes = parseInt(toMinutes.text)}" focusOut="{toMinutes.text = StringUtil.leftPad(toMinutes.text)}" />
				<s:Label text="hr"/>
			</s:HGroup>
		</mx:FormItem>
	</s:HGroup>
	
	<mx:FormItem label="" labelWidth="67">
		<s:CheckBox id="isRecurring" label="Recurring {appointment.recurUnit?' every ' + Appointment.RECUR_TYPES.getItemAt(recurUnit.selectedIndex).label + '':''}" selected="{appointment.isRecurring}" change="{appointment.isRecurring = isRecurring.selected}" />
		<mx:LinkBar 
			id="recurUnit" 
			linkButtonStyleName="linkBtnGray" contentBackgroundAlpha="0" horizontalGap="0" 
			dataProvider="{Appointment.RECUR_TYPES}" labelField="labelShort" separatorWidth="0" 
			itemClick="{appointment.recurUnit=Appointment.RECUR_TYPES[recurUnit.selectedIndex].value}" visible="{appointment.isRecurring}" />		
	</mx:FormItem>
	
	<s:VGroup paddingLeft="30">
		<s:Label text="What is the type of this appointment?" styleName="darkGray12" />
		<s:VGroup id="typeList" gap="5" paddingLeft="50" />
	</s:VGroup>
	
	<s:VGroup paddingLeft="30" gap="9">
		<s:Label text="What is your reason for this appointment?" styleName="darkGray12" />
		<s:TextInput id="reason" styleName="{reason.text == REASON_PLACEHOLDER ? 'searchPlaceholder' : 'grayText11'}" paddingLeft="7" paddingTop="5" width="292" height="24" click="{if(reason.text == REASON_PLACEHOLDER) reason.text=''}" />
	</s:VGroup>
	
	<s:HGroup paddingLeft="30" gap="9">
		<s:CheckBox id="sendToPatient" label="Send message to patient" selected="{sendMessageToPatient}" change="{sendMessageToPatient = sendToPatient.selected}" />
	</s:HGroup>
	
	<s:VGroup paddingLeft="10">
		<s:Line xFrom="0" xTo="330">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" weight="1" alpha=".25" />
			</s:stroke>
		</s:Line>
	</s:VGroup>
	
	<s:VGroup paddingLeft="80">
		<s:CheckBox id="setReminder" label="Personal reminder" selected="{appointment.setReminder}" change="{appointment.setReminder = setReminder.selected}" />
		<s:HGroup visible="{appointment.setReminder}" verticalAlign="middle">
			<s:TextInput id="reminderTime" width="35" height="18" styleName="grayText11" text="{appointment.reminderTime}" />
			<s:DropDownList 
				id="reminderTimeUnits" width="120" height="24" 
				dataProvider="{reminderTimeUnitOptions}" 
				styleName="buttonText" skinClass="skins.messages.CustomDropdownListWithIcon" 
				selectedIndex="0" 
				change="{appointment.reminderTimeUnits}" />
		</s:HGroup>
	</s:VGroup>
	
</s:VGroup>
