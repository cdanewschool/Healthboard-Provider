<?xml version="1.0" encoding="utf-8"?>
<enhancedtitlewindow:EnhancedTitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" showCloseButton="false"
	xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" 
	width="268" maxHeight="467" collapsible="true" headerClickable="false"
	backgroundAlpha="1" backgroundColor="0x3C3C3B" borderColor="0xF29222" cornerRadius="5" 
	styleName="teamProfileTitle" 
	controlBarVisible="true" close="onClose(event)" 
	resize="resize(event)" creationComplete="init()">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import models.Chat;
			import models.ChatMessage;
			import models.FileUpload;
			import models.UserModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import org.osmf.net.StreamType;
			
			import spark.components.mediaClasses.DynamicStreamingVideoItem;
			import spark.components.mediaClasses.DynamicStreamingVideoSource;
			import spark.events.IndexChangeEvent;
			
			import utils.DateUtil;
			
			private var updateTimer:Timer;
			private var responseTimer:Timer;
			
			private var fileRef:FileReference;
			
			[Bindable] public var chat:Chat;
			[Bindable] public var user:UserModel;
			
			public var attachments:ArrayCollection;
			
			private var patientSpeak:Array =
				[
					{ triggers: ["hi","hello"], responses: [ "Hello", "hi {{name}}", "Hi Dr." ] },
				];
			
			private var providerSpeak:Array =
				[
					{ triggers: ["hi","hello", "what's new"], responses: [ "Hey Dr.", "hi {{name}}" ] },
					{ triggers: ["those yankees"], responses: [ "You know I'm a Red Sox Fan!" ] },
					{ triggers: ["weather"], responses: [ "Overcast again", "It's raining, and I forgot my umbrella" ] },
				];
			
			private var camera:Camera;
			private var videoSoure:DynamicStreamingVideoSource;
			
			private function onSendClick( event:MouseEvent ):void
			{
				relayMessage();
			}
			
			private function relayMessage():void
			{
				var messageAttachments:ArrayCollection;
				if( attachments && attachments.length )
					messageAttachments = new ArrayCollection( attachments.source.slice() );
				
				sendMessage( chat.sourceUser, input.text, messageAttachments );
				simulateResponse();
				
				//	clear stuff
				input.text = "";
				attachments = new ArrayCollection;
			}
			
			private function sendMessage( user:UserModel, text:String, attachments:ArrayCollection = null ):void
			{
				var message:ChatMessage = new ChatMessage();
				message.time = new Date();
				message.text = text;
				message.user = user;
				message.attachments = attachments;
				chat.addMessage( message );
			}
			
			private function simulateResponse():void
			{
				responseTimer.reset();
				responseTimer.delay = DateUtil.SECOND * (1 + Math.round( Math.random() * 5 ) );
				responseTimer.start();
			}
			
			private function onResponseTimer( event:TimerEvent ):void
			{
				var responseObject:Object;
				var rid:int;
				var message:String;
				var user:UserModel;
				
				var last:ChatMessage = chat.messages && chat.messages.length ? ChatMessage( chat.messages.getItemAt( chat.messages.length -1 ) ) : null;
				var responses:Array = chat.targetUser.userType == UserModel.TYPE_PATIENT ? patientSpeak : providerSpeak;
				
				if( last 
					&& last.text != "" )
				{
					var lastMessage:String = last.text;
					lastMessage = lastMessage.replace( /\n/, '' );
					lastMessage = lastMessage.replace( /\r/, '' );
					lastMessage = lastMessage.replace( /\s*(\w*)\s/, '' );
					
					user = last.user == chat.sourceUser ? chat.targetUser : chat.sourceUser;
					
					for each(responseObject in responses)
					{
						for each(var trigger:String in responseObject.triggers)
						{
							if( lastMessage.toLowerCase().indexOf(trigger) > -1 )
							{
								rid = Math.floor( Math.random() * (responseObject.responses.length) );
								
								message = responseObject.responses[ rid ];
								message = message.replace( /{{name}}/, user.firstName );
								
								sendMessage( chat.targetUser, message );
								
								break;
							}
						}
						
					}
				}
				else
				{
					user = chat.sourceUser;
					
					responseObject = responses[0];
					rid = Math.floor( Math.random() * (responseObject.responses.length -1) );
					
					message = responseObject.responses[ rid ];
					message = message.replace( /{{name}}/, chat.targetUser.firstName );
					
					sendMessage( chat.targetUser, message );
				}
			}
			
			private function addAttachment( event:MouseEvent ):void
			{
				fileRef.browse();
			}
			
			private function onAttachmentSelect( event:Event ):void
			{
				fileRef.load();
			}	
			
			private function onAttachmentComplete( event:Event ):void
			{
				var attachment:FileUpload = new FileUpload( fileRef.name, fileRef.size, fileRef.data );
				
				if( !attachments ) attachments = new ArrayCollection();
				attachments.addItem( attachment );
			}
			
			private function copyChat( event:MouseEvent ):void
			{
				var log:String = chat.log;
				log = log.replace( /<\/*font\s*[^>]*>/g, '' );
					
				System.setClipboard( log );
			}
			
			private function onUpdate( event:TimerEvent ):void
			{
				title = chat.targetUser.fullNameAbbreviated + ' - ' + chat.elapsed;
			}
			
			private function onUpdateChatMode(event:IndexChangeEvent):void
			{
				chat.mode = ButtonBar(event.currentTarget).selectedItem.data;
				
				initChatMode();
			}
			
			private function initChatMode():void
			{
				currentState = chat.mode + 'Chat';
			}
			
			private function resize(event:ResizeEvent=null):void
			{
				position();
			}
			
			private function position():void
			{
				this.x = stage.stageWidth - (this.width + 10);
				this.y = stage.stageHeight - (this.height + 10);
			}
			
			private function onClose(event:Event):void
			{
				chat.endTime = new Date();
				user.addChat( chat );
				
				sourceUserVideo.source = null;
				
				PopUpManager.removePopUp(this);
			}
			
			private function onKeyDown(event:KeyboardEvent):void
			{
				if( event.keyCode == Keyboard.ENTER )
				{
					relayMessage();
				}
			}
			
			private function initCamera(event:Event):void
			{
				camera = Camera.getCamera();
				
				if (camera) 
				{
					videoSoure = new DynamicStreamingVideoSource();
					
					var videoItems:Vector.<DynamicStreamingVideoItem>;
					videoItems=new Vector.<DynamicStreamingVideoItem>();
					videoItems[0]=new DynamicStreamingVideoItem();
					
					videoSoure.host= "";
					videoSoure.streamType=StreamType.LIVE;
					videoSoure.streamItems=videoItems;
					
					sourceUserVideo.source = videoSoure;
					
					var cam:Camera = Camera.getCamera();
					cam.setMode(78, 55, 15);
					cam.setQuality(0, 80);
					sourceUserVideo.videoObject.attachCamera(cam); 
					
				} 
				else 
				{
					Alert.show("You don't seem to have a camera.");
				}
				
			}
			
			private function init():void
			{
				updateTimer = new Timer( 500 );
				updateTimer.addEventListener( TimerEvent.TIMER, onUpdate );
				
				responseTimer = new Timer( 500, 1 );
				responseTimer.addEventListener( TimerEvent.TIMER_COMPLETE, onResponseTimer );
				
				fileRef = new FileReference();
				fileRef.addEventListener(Event.SELECT, onAttachmentSelect);
				fileRef.addEventListener(Event.COMPLETE, onAttachmentComplete);
				
				volumeSlider.setStyle('accentColor',0xeeeeee);
				
				updateMode.selectedIndex = Chat.getModeIndex( chat.mode );
				
				initChatMode();
				simulateResponse();
				
				controlBarVisible=false;
				
				position();
				
				updateTimer.start();
				
				addEventListener( KeyboardEvent.KEY_DOWN, onKeyDown );
			}
		]]>
	</fx:Script>
	
	<enhancedtitlewindow:states>
		<s:State name="textChat" />
		<s:State name="voiceChat" />
		<s:State name="videoChat" />
	</enhancedtitlewindow:states>
	
	<enhancedtitlewindow:controlBarContent />
	
	<enhancedtitlewindow:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
	</enhancedtitlewindow:layout>
	
	<s:Image includeIn="voiceChat" source="@Embed('images/chatPhoneReadout.jpg')" />
	
	<s:Group includeIn="videoChat">
		
		<s:BorderContainer borderColor="0xBBBDBF" borderWeight="1" width="240" height="184">
			<s:Image id="targetUserPic" width="240" height="184" creationComplete="{targetUserPic.source = chat.targetUser.getProfilePictureURL('medium')}" />
		</s:BorderContainer>
		
		<s:BorderContainer borderColor="0xBBBDBF" borderWeight="1" width="78" height="55" right="5" bottom="5" > 
			<s:VideoDisplay id="sourceUserVideo" width="78" height="55" creationComplete="initCamera(event)" />
		</s:BorderContainer>
		
	</s:Group>
	
	<s:HGroup>
		
		<s:ButtonBar 
			id="updateMode"
			includeIn="textChat,voiceChat,videoChat"
			width="71" height="20"
			dataProvider="{Chat.MODES}" 
			iconField="icon"
			change="onUpdateChatMode(event)" 
			firstButton="skins.general.IconButtonSkin"
			middleButton="skins.general.IconButtonSkin" 
			lastButton="skins.general.IconButtonSkin" fontSize="11">
			
			<s:layout>
				<s:ButtonBarHorizontalLayout gap="3" />
			</s:layout>
			
		</s:ButtonBar>
		
		<s:Line yFrom="0" yTo="17">
			<s:stroke>
				<s:SolidColorStroke color="0x999999" weight="1" />
			</s:stroke>
		</s:Line>
		
		<s:ToggleButton icon="images/button_icons/volume.png" height="20" width="20"  />
		
		<s:HSlider id="volumeSlider" skinClass="skins.general.HSlider.HSliderSkin" width="127" height="20" showDataTip="false" />
		
	</s:HGroup>
	
	<mx:VDividedBox verticalGap="4">
		
		<s:List id="output" width="240" height="117" dataProvider="{chat.messages}" itemRenderer="components.itemrenderers.ChatMessageRenderer" rollOverColor="0x808080" contentBackgroundColor="0xE6E6E6">
			<s:layout>
				<s:VerticalLayout variableRowHeight="true" paddingLeft="0" paddingTop="0" paddingRight="0" paddingBottom="0" gap="0" />
			</s:layout>
		</s:List>
		
		<s:TextArea id="input" width="240" height="58" creationComplete="{stage.focus=input}" />
		
	</mx:VDividedBox>
	
	<s:HGroup>
		
		<s:HGroup gap="2" verticalAlign="middle">
			<mx:LinkButton styleName="linkBtnBlue" label="+ add attachments" fontWeight="normal" fontSize="11" click="addAttachment(event)" />
			<s:Line yFrom="0" yTo="10">
				<s:stroke>
					<s:SolidColorStroke color="0xAEDEE4" weight="1" />
				</s:stroke>
			</s:Line>
			<mx:LinkButton styleName="linkBtnBlue" label="copy chat" fontWeight="normal" fontSize="11" click="copyChat(event)" />
		</s:HGroup>
		
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button label="Send" click="onSendClick(event)" />
		</s:HGroup>
		
	</s:HGroup>
	
</enhancedtitlewindow:EnhancedTitleWindow>
