<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:popups="components.popups.*"
	width="374" height="550"
	controlBarVisible="true" 
	skinClass="skins.general.myHeaderlessTitleWindow"
	creationComplete="init()" xmlns:general="components.general.*">
	
	<fx:Declarations>
		<s:LinearGradient id="fill" rotation="90">
			<s:GradientEntry color="0xF7F7F7" />
			<s:GradientEntry color="0XB3B3B3" />
		</s:LinearGradient>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.popups.DeleteConfirmation;
			
			import models.PatientModel;
			import models.modules.ExerciseModel;
			import models.modules.MedicationsModel;
			import models.modules.NutritionModel;
			import models.modules.VitalSignsModel;
			import models.modules.decisionsupport.RiskFactor;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var modules:ArrayCollection = new ArrayCollection
				(
					[
						{label:"Please select one"},
						{
							label:"Exercise",data:ExerciseModel.ID,
							factors: new ArrayCollection
							(
								[
									{label:"Overall PRT",data:"prt"},
									{label:"Bike",data:"bike"},
									{label:"Elliptical Machine",data:"elliptical"},
									{label:"Run/Walk",data:"run_walk"},
									{label:"Swim",data:"swim"}
								]
							)
						},
						{label:"Medications",data:MedicationsModel.ID},
						{label:"Nutrition",data:NutritionModel.ID},
						{label:"Vital Signs",data:VitalSignsModel.ID}
					]
				);
			
			[Bindable] private var categories:ArrayCollection;
			[Bindable] private var riskFactors:ArrayCollection;
			[Bindable] private var riskFactorGroups:ArrayCollection;
			
			private var fromDate:Date;
			private var toDate:Date;
			
			private var dirty:Boolean = false;
			
			private var _patient:PatientModel;
			
			[Bindable]
			public function get patient():PatientModel
			{
				return _patient;
			}

			public function set patient(value:PatientModel):void
			{
				_patient = value;
				
				this.riskFactorGroups = new ArrayCollection( patient.riskFactorGroups.source );
				
				dirty = true;
				
				invalidateProperties();
			}

			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( dirty 
					&& patient )
				{
					var riskFactors:ArrayCollection = new ArrayCollection();
					
					for each(var riskFactor:RiskFactor in riskFactorGroups)
					{
						riskFactors.source = riskFactors.source.concat( riskFactor.types.source );
					}
					
					this.riskFactors = riskFactors;
					
					dirty = false;
				}
			}
			
			private function save():void
			{
				patient.riskFactorGroups.removeAll();
				
				for each(var group:RiskFactor in riskFactorGroups)
				{
					patient.riskFactorGroups.addItem( group );
				}
				
				cancel();
			}
			
			private function cancel():void
			{
				dispatchEvent( new Event( Event.CANCEL ) );
				
				PopUpManager.removePopUp(this);
			}
			
			private function onModuleSelect(event:IndexChangeEvent):void
			{
				categories = null;
				
				if( moduleSelect.selectedItem.data )
				{
					if( moduleSelect.selectedItem.factors )
					{
						categories = new ArrayCollection( [ {label:'Please select one'} ].concat( moduleSelect.selectedItem.factors.source ) );
						
						categorySelect.selectedIndex = 0;
					}
				}
			}
			
			private function onModuleCategorySelect(event:IndexChangeEvent):void
			{
				if( categorySelect.selectedItem.data )
				{
				}
			}
			
			private function onAddFactorSave():void
			{
				//	TODO: get risk factor category if already exists
				var riskFactorGroup:RiskFactor = new RiskFactor();
				riskFactorGroup.name = moduleSelect.selectedItem.label;
				
				var riskFactor:RiskFactor = new RiskFactor();
				riskFactor.name = categorySelect.selectedItem.label;
				
				riskFactorGroup.types = new ArrayCollection( [ riskFactor ] );
				
				riskFactorGroups.addItem( riskFactorGroup );
				
				onAddFactorCancel();
				
				dirty = true;
				
				invalidateProperties();
			}
			
			private function onAddFactorCancel():void
			{
				categories = null;
				
				moduleSelect.selectedIndex = 0;
			}
			
			public function onRemoveRiskFactor( factor:RiskFactor ):void
			{
				var deleteConfirmation:DeleteConfirmation = new DeleteConfirmation();
				deleteConfirmation.data = factor;
				deleteConfirmation.addEventListener( CloseEvent.CLOSE, onDeleteConfirm );
				
				PopUpManager.addPopUp( deleteConfirmation, DisplayObject(mx.core.FlexGlobals.topLevelApplication) );
				PopUpManager.centerPopUp( deleteConfirmation );
			}
			
			private function onDeleteConfirm( event:CloseEvent ):void
			{
				var deleteConfirmation:DeleteConfirmation = event.currentTarget as DeleteConfirmation;
				var factor:RiskFactor = deleteConfirmation.data as RiskFactor;
				
				if( event.detail == Alert.YES )
				{
					for each(var riskFactorGroup:RiskFactor in patient.riskFactorGroups)
					{
						for each(var riskFactor:RiskFactor in riskFactorGroup.types)
						{
							if( riskFactor == factor )
							{
								riskFactorGroup.types.removeItemAt( riskFactorGroup.types.getItemIndex( factor ) );
								break;
							}
						}
					}
				}
			}
			
			private function init():void
			{
				controlBarVisible = false;
				
				var today:Date = AppProperties.getInstance().controller.model.today;
				
				fromDate = new Date( today.fullYear, today.month, today.date );
				toDate = new Date( today.fullYear, today.month, today.date );
				
				fromDateSelect.selectedDate = fromDate;
				toDateSelect.selectedDate = toDate;
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="20" paddingTop="15" paddingRight="20" gap="10" horizontalAlign="left" />
	</s:layout>
	
	<s:Label text="Manage Risk Factors" styleName="darkGrayBold16" paddingBottom="5" />
	
	<s:VGroup width="333" height="434" gap="-1">
		
		<s:BorderContainer width="100%" height="233" backgroundFill="{fill}">
			
			<s:layout>
				<s:VerticalLayout paddingLeft="15" paddingTop="10" gap="15" />
			</s:layout>
			
			<s:Label text="Add a factor" styleName="darkGrayBold16" />
			
			<s:VGroup>
				<s:Label text="Please select a module" styleName="darkGray12 italic" />
				<s:DropDownList id="moduleSelect" dataProvider="{modules}" width="305" height="24" labelField="label" creationComplete="{moduleSelect.selectedIndex = 0}" change="onModuleSelect(event)" />
			</s:VGroup>
			
			<s:VGroup visible="{moduleSelect.selectedIndex>0 &amp;&amp; categories!=null}">
				<s:Label text="Please select a category" styleName="darkGray12 italic" />
				<s:DropDownList id="categorySelect" dataProvider="{categories}" width="305" height="24" labelField="label" includeInLayout="{categories!=null}" change="onModuleCategorySelect(event)" />
			</s:VGroup>
			
			<s:HGroup paddingLeft="10" visible="{categorySelect.selectedIndex>0}">
				
				<mx:FormItem label="From:" labelWidth="40" labelStyleName="darkGrayBold12">
					<mx:DateField id="fromDateSelect" change="fromDate = fromDateSelect.selectedDate" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark"/>
				</mx:FormItem>
				
				<mx:FormItem label="To:" labelWidth="30" labelStyleName="darkGrayBold12">
					<mx:DateField id="toDateSelect" change="{toDate = toDateSelect.selectedDate}" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark"/>
				</mx:FormItem>
				
			</s:HGroup>
			
			<s:HGroup width="100%" horizontalAlign="right" visible="{categorySelect.selectedIndex>0}" paddingRight="10">
				<s:Button label="Add" width="50" height="24" click="onAddFactorSave();" skinClass="skins.general.IconButtonSkin" />
				<s:Button label="Cancel" width="60" height="24" click="onAddFactorCancel();" skinClass="skins.general.IconButtonSkin" />
			</s:HGroup>
			
		</s:BorderContainer>
		
		<s:BorderContainer width="100%" height="200" backgroundColor="0xECECEC">
			
			<s:Scroller width="100%" height="100%">
				
				<s:DataGroup width="100%" height="200" dataProvider="{riskFactors}"> 
					
					<s:layout>
						<s:VerticalLayout paddingLeft="20" paddingTop="10" paddingRight="20" paddingBottom="10" gap="5" />
					</s:layout> 
					
					<s:itemRenderer>
						
						<fx:Component>
							
							<mx:HBox width="100%">
								<fx:Script>
									<![CDATA[
										import enum.RiskLevel;
										
										import models.modules.decisionsupport.RiskFactor;
										import models.modules.decisionsupport.RiskFactorUpdate;
										
										[Bindable] private var riskFactor:RiskFactor;
										[Bindable] private var update:RiskFactorUpdate;
										
										override public function set data(value:Object):void 
										{
											super.data = value;
											
											riskFactor = data as RiskFactor;
											
											update = riskFactor && riskFactor.updates && riskFactor.updates.length ? riskFactor.updates.getItemAt(0) as RiskFactorUpdate : null;
										}
										
									]]>
								</fx:Script>
								
								<s:CheckBox label="{riskFactor.name}" styleName="darkGray12" selected="true" />
								
								<s:HGroup width="100%" horizontalAlign="right">
									<general:MainLinkButton label="Delete" styleName="linkBtnDarkBlue" click="outerDocument.onRemoveRiskFactor(riskFactor)" />
								</s:HGroup>
								
							</mx:HBox>
							
						</fx:Component>
						
					</s:itemRenderer>
					
				</s:DataGroup>
				
			</s:Scroller>
			
		</s:BorderContainer>
		
	</s:VGroup>

	<s:VGroup>
		
		<s:Line xFrom="0" xTo="354">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" weight="1" alpha=".25" />
			</s:stroke>
		</s:Line>
		
	</s:VGroup>
	
	<s:HGroup width="100%" horizontalAlign="right">
		
		<s:Button label="Submit" height="24" click="save();" skinClass="skins.general.IconButtonSkin" />
		<s:Button label="Cancel" height="24" click="cancel();" skinClass="skins.general.IconButtonSkin" />
		
	</s:HGroup>
	
</s:TitleWindow>
